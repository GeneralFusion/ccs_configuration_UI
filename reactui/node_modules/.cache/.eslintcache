[{"C:\\Code\\ReactUI\\React\\reactui\\src\\index.js":"1","C:\\Code\\ReactUI\\React\\reactui\\src\\reportWebVitals.js":"2","C:\\Code\\ReactUI\\React\\reactui\\src\\App.js":"3","C:\\Code\\ReactUI\\React\\reactui\\src\\Controller.js":"4","C:\\Code\\ReactUI\\React\\reactui\\src\\ValueChanger.js":"5","C:\\Code\\ReactUI\\React\\reactui\\src\\YAML.js":"6","C:\\Code\\ReactUI\\React\\reactui\\src\\Client.js":"7","C:\\Code\\ReactUI\\React\\reactui\\src\\SliderChanger.js":"8","C:\\Code\\ReactUI\\React\\reactui\\src\\BooleanChanger.js":"9","C:\\Code\\ReactUI\\React\\reactui\\src\\theme.js":"10","C:\\Code\\ReactUI\\React\\reactui\\src\\DropdownChanger.js":"11","C:\\Code\\ReactUI\\React\\reactui\\src\\Section.js":"12","C:\\Code\\ReactUI\\React\\reactui\\src\\CollapsibleChanger.js":"13","C:\\Code\\ReactUI\\React\\reactui\\src\\TextChanger.js":"14","C:\\Code\\ReactUI\\React\\reactui\\src\\ScopeChanger.js":"15","C:\\Code\\ReactUI\\React\\reactui\\src\\ChannelChanger.js":"16","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\index.js":"17","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\theme.js":"18","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\App.js":"19","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Controller.js":"20","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Client.js":"21","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\YAML.js":"22","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ValueChanger.js":"23","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\SliderChanger.js":"24","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Section.js":"25","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\BooleanChanger.js":"26","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\DropdownChanger.js":"27","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ScopeChanger.js":"28","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\CollapsibleChanger.js":"29","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\TextChanger.js":"30","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ChannelChanger.js":"31","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ListChanger.js":"32"},{"size":526,"mtime":1663009797584,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1663084836497,"results":"35","hashOfConfig":"34"},{"size":1603,"mtime":1664810362439,"results":"36","hashOfConfig":"34"},{"size":4104,"mtime":1664562814058,"results":"37","hashOfConfig":"34"},{"size":5346,"mtime":1664567241496,"results":"38","hashOfConfig":"34"},{"size":1023,"mtime":1663086038054,"results":"39","hashOfConfig":"34"},{"size":2173,"mtime":1664816484893,"results":"40","hashOfConfig":"34"},{"size":1639,"mtime":1664552526358,"results":"41","hashOfConfig":"34"},{"size":562,"mtime":1664382176156,"results":"42","hashOfConfig":"34"},{"size":335,"mtime":1663009797615,"results":"43","hashOfConfig":"34"},{"size":1579,"mtime":1664566271087,"results":"44","hashOfConfig":"34"},{"size":994,"mtime":1664382174436,"results":"45","hashOfConfig":"34"},{"size":6140,"mtime":1664814941540,"results":"46","hashOfConfig":"34"},{"size":792,"mtime":1664815373411,"results":"47","hashOfConfig":"34"},{"size":11891,"mtime":1664564285643,"results":"48","hashOfConfig":"34"},{"size":5828,"mtime":1664398994159,"results":"49","hashOfConfig":"34"},{"size":543,"mtime":1664837221190,"results":"50","hashOfConfig":"51"},{"size":354,"mtime":1664837221196,"results":"52","hashOfConfig":"51"},{"size":2640,"mtime":1664911109716,"results":"53","hashOfConfig":"51"},{"size":4142,"mtime":1664988391148,"results":"54","hashOfConfig":"51"},{"size":2498,"mtime":1664999200257,"results":"55","hashOfConfig":"51"},{"size":1023,"mtime":1664837221146,"results":"56","hashOfConfig":"51"},{"size":5861,"mtime":1664999266573,"results":"57","hashOfConfig":"51"},{"size":1639,"mtime":1664837221140,"results":"58","hashOfConfig":"51"},{"size":1312,"mtime":1664999217787,"results":"59","hashOfConfig":"51"},{"size":562,"mtime":1664837221129,"results":"60","hashOfConfig":"51"},{"size":1579,"mtime":1664837221136,"results":"61","hashOfConfig":"51"},{"size":11891,"mtime":1664984935699,"results":"62","hashOfConfig":"51"},{"size":6140,"mtime":1664837221134,"results":"63","hashOfConfig":"51"},{"size":792,"mtime":1664837221141,"results":"64","hashOfConfig":"51"},{"size":5828,"mtime":1664837221131,"results":"65","hashOfConfig":"51"},{"size":4947,"mtime":1664918220239,"results":"66","hashOfConfig":"51"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"6i77mg",{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"81"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},"1m4n49d",{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"127"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"127"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"127"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"127"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"127"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},"C:\\Code\\ReactUI\\React\\reactui\\src\\index.js",[],[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\reportWebVitals.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\App.js",["179"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\Controller.js",["180"],[],"import Button from '@mui/material/Button'\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport Client from './Client.js'\r\nimport React, { useState } from 'react'\r\n\r\nimport { loadYAML } from './YAML.js'\r\nlet mainConfig\r\n//Value:Label Mappings,\r\n//collapsbible, make scopes to names instead of numbers, change to array for order,\r\nfunction Controller(props) {\r\n    const [clients, setClients] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const yamlFile = loadYAML('test.yml')\r\n\r\n    const homeButton = (<Button href={'/home'}>Home</Button>)\r\n    console.log('Controller rerender')\r\n\r\n    const changeValue = ([clientNumber, [keyHistory, newValue]]) => {\r\n        //Array destructuring. Will take the array of property and value and make it into two variables.\r\n        let client = mainConfig[clientNumber]\r\n        //console.log(client);\r\n        console.log(keyHistory)\r\n        console.log(newValue)\r\n        for (let i = 0; i < keyHistory.length - 1; i++) {\r\n            //Go through keyhistory (except last one). Now client is pointing to the last object which is the {proprety: value}.\r\n            client = client[keyHistory[i]]\r\n        }\r\n        client[keyHistory[keyHistory.length - 1]] = newValue\r\n        //     console.log(client);\r\n        console.log(mainConfig)\r\n    }\r\n    const generateClients = (json, propertiesDB, scopesDB) => {\r\n        let tempArray = []\r\n        for (const [clientNumber, clientData] of Object.entries(json)) {\r\n            tempArray.push(\r\n                <Client\r\n                    sx={{}}\r\n                    key={clientNumber}\r\n                    clientNumber={clientNumber}\r\n                    properties={clientData}\r\n                    propertiesDB={propertiesDB}\r\n                    scopesDB={scopesDB}\r\n                    onValueChange={changeValue}\r\n                ></Client>\r\n            )\r\n        }\r\n        return tempArray\r\n    }\r\n\r\n    const getData = async () => {\r\n        try {\r\n            const req = await fetch(`/getData/`, { method: 'GET' })\r\n            const json = await req.json()\r\n            return json\r\n        } catch (err) {\r\n            console.log('Error fetching data')\r\n        }\r\n    }\r\n    const initController = async () => {\r\n        const data = await getData()\r\n        const propertiesDB = data['propertiesDB']\r\n        const scopesDB = data['scopesDB']\r\n        console.log(data)\r\n        mainConfig = data['clients']\r\n        let tempClients = generateClients(data['clients'], propertiesDB, scopesDB) //Properties DB seems to be passes by reference\r\n        setClients(tempClients)\r\n    }\r\n\r\n    const saveChanges = async () => {\r\n        console.log('Saving: ')\r\n        try {\r\n            await fetch(`/getData/`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(mainConfig),\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    if (clients.length > 0) {\r\n        return (\r\n            <div style={{ textAlign: 'center', marginBottom: 20}}>\r\n                {homeButton}\r\n                <h1>Controls</h1>\r\n                {clients}\r\n                {/* <Client properties={properties} onValueChange={changeValue}></Client> */}\r\n                {/* <ValueChanger onValueChange={sendChange} name=\"temperature\" value={10}></ValueChanger> */}\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => saveChanges()} sx={{marginTop: 1, width: 1}}>\r\n                    Save Changes\r\n                </Button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{marginTop: '50px'}}>\r\n                {homeButton}\r\n                  <LoadingButton\r\n          onClick={() => {\r\n            setIsLoading(true)\r\n            initController()\r\n          }}\r\n          loading={isLoading}\r\n          loadingIndicator=\"Loading…\"\r\n          variant=\"contained\"\r\n        >\r\n          Fetch data\r\n        </LoadingButton>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controller\r\n",[],"C:\\Code\\ReactUI\\React\\reactui\\src\\ValueChanger.js",["181","182","183"],[],"import SliderChanger from './SliderChanger.js'\r\nimport React, {useEffect} from 'react'\r\nimport { Box, Paper } from '@mui/material/'\r\nimport BooleanChanger from './BooleanChanger.js'\r\nimport DropdownChanger from './DropdownChanger.js'\r\nimport Section from './Section.js'\r\nimport CollapsibleChanger from './CollapsibleChanger.js'\r\nimport TextChanger from './TextChanger.js'\r\nimport ScopeChanger from './ScopeChanger.js'\r\n\r\nimport { Component } from 'react'\r\n\r\nfunction ValueChanger(props) {\r\n    //Add steps and min and max ranges.\r\n    const [valueChanger, isLarge] = createValueChanger(props)\r\n    const fontSize = 13//Math.min(160 / props.propertiesDB[props.property].name.length, 13) \r\n    if(isLarge){\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={{ px: 1,textAlign: 'center', border: props.hasBorder ? 'solid 0px' : 'none' }}>\r\n                    <h2 style={{ fontSize: 20 }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={{ px: 1, minHeight: 70, maxHeight: 70,height: 70,textAlign: 'center', border: props.hasBorder ? 'solid 0px' : 'none' }}>\r\n                    <h2 style={{ fontSize: fontSize }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nfunction createValueChanger(props) {\r\n    const sendChange = (newValue) => {\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    const getOptions = (property) => {\r\n        return props.propertiesDB[property]['options'] //Only place to change this\r\n    }\r\n    let valueChangerComponent\r\n    let isLarge = false\r\n    const componentType = props.propertiesDB[props.property]['type']\r\n    const newKeyHistory = [...props.keyHistory, props.property]\r\n\r\n    switch (\r\n        componentType //THIS WILL BE THE LOOKUP TABLE\r\n    ) {\r\n        case 'boolean':\r\n            valueChangerComponent = (\r\n                <BooleanChanger\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                ></BooleanChanger>\r\n            )\r\n            break\r\n        case 'slider':\r\n            valueChangerComponent = (\r\n                <SliderChanger\r\n                    sx={{}}\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n                ></SliderChanger>\r\n            )\r\n            break\r\n        case 'dropDown':\r\n            valueChangerComponent = (\r\n                <DropdownChanger\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n             \r\n                ></DropdownChanger>\r\n            )\r\n            break\r\n        case 'section':\r\n            valueChangerComponent = (\r\n                <Section\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></Section>\r\n            )\r\n            isLarge = true\r\n            break\r\n        case 'collapsible':\r\n            valueChangerComponent = (\r\n                <CollapsibleChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></CollapsibleChanger>\r\n            )\r\n            isLarge = true\r\n\r\n            break\r\n        case 'text':\r\n            valueChangerComponent = (\r\n                <TextChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></TextChanger>\r\n            )\r\n            break\r\n        case 'scope':\r\n            isLarge = true\r\n            valueChangerComponent = (\r\n                <ScopeChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></ScopeChanger>\r\n            )\r\n            break\r\n    }\r\n    return [valueChangerComponent, isLarge]\r\n}\r\n\r\nexport default ValueChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\YAML.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\Client.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\SliderChanger.js",["184"],[],"import React, { useState } from 'react'\r\nimport MuiInput from '@mui/material/Input'\r\n\r\nimport Slider from '@mui/material/Slider'\r\n\r\nfunction SliderChanger(props) {\r\n    const [value, setValue] = useState(Number(props.value))\r\n    const options = props.options\r\n    const sendChange = () => {\r\n        props.onValueChange([props.keyHistory, value])\r\n    }\r\n    const handleChange = (event, newValue) => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value))\r\n    }\r\n    const handleBlur = () => {\r\n        let tempValue = value\r\n        if (value < options.min) {\r\n            tempValue = options.min\r\n        } else if (value > options.max) {\r\n            tempValue = options.max\r\n        }\r\n        setValue(options.step * Math.round(tempValue / options.step)) //Make value to closest step\r\n        sendChange(value)\r\n    }\r\n\r\n    return (\r\n        // <Slider size=\"small\" sx={{width: '90%', mt: 1, color: 'crimson'}} valueLabelDisplay=\"on\" value={value} min={options.min} max={options.max} step={options.step} marks={options.marks} track={options.track} onChange={handleChange} onChangeCommitted={sendChange}></Slider>\r\n        <MuiInput\r\n            disabled={props.isDisabled}\r\n            value={value}\r\n            sx={{}}\r\n            inputProps={{\r\n                step: options.step,\r\n                min: options.min,\r\n                max: options.max,\r\n                type: 'number',\r\n                style: { fontSize: '1em', textAlign: 'center' },\r\n            }}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n        ></MuiInput>\r\n    )\r\n}\r\n\r\nexport default SliderChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\BooleanChanger.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\theme.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\DropdownChanger.js",["185"],[],"import React, { useEffect, useState } from 'react'\r\nimport Select from '@mui/material/Select'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nfunction DropdownChanger(props) {\r\n    const [value, setValue] = useState(props.value)\r\n    const handleChange = (event) => {\r\n        console.log(props.value)\r\n        setValue(event.target.value)\r\n        props.onValueChange([props.keyHistory, event.target.value])\r\n    }\r\n\r\n    let returnSelect\r\n    const style={ mb: 1, minWidth: 5, fontSize: 12 }\r\n    if (props.options.differentLabels) {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" sx={style} MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }}\r\n            value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value} style={{fontSize: 12}}>\r\n                        {option.label}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    } else {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }} sx={style} value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option} value={option} style={{fontSize: 12}}>\r\n                        {option}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    }\r\n    return returnSelect\r\n}\r\n\r\nexport default DropdownChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\Section.js",["186"],[],"import ValueChanger from './ValueChanger'\r\nimport Stack from '@mui/material/Stack'\r\nfunction Section(props) {\r\n    console.log(props.property)\r\n    console.log(props.value)\r\n    let valueChangerList = []\r\n    const sendChange = (newValue) => {\r\n        console.log(props.property)\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    let i = 1\r\n    for (const [property, value] of Object.entries(props.value)) {\r\n        valueChangerList.push(\r\n            <ValueChanger\r\n                sx={{}}\r\n                key={property}\r\n                property={property}\r\n                value={value}\r\n                keyHistory={props.keyHistory}\r\n                propertiesDB={props.propertiesDB}\r\n                scopesDB={props.scopesDB}\r\n                onValueChange={sendChange}\r\n            ></ValueChanger>\r\n        )\r\n    }\r\n    return (\r\n        <Stack spacing={0} sx={{}}>\r\n            {valueChangerList}\r\n        </Stack>\r\n    )\r\n}\r\nexport default Section\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\CollapsibleChanger.js",["187","188","189","190","191","192"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\TextChanger.js",["193","194","195"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\ScopeChanger.js",["196","197","198","199","200"],[],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport Box from '@mui/material/Box'\r\nimport { Accordion, AccordionSummary, AccordionDetails, Button } from '@mui/material'\r\n\r\nimport ImageList from '@mui/material/ImageList'\r\nimport ImageListItem from '@mui/material/ImageListItem'\r\nimport ValueChanger from './ValueChanger'\r\nimport ChannelChanger from './ChannelChanger.js'\r\n\r\nlet childKey = 0 //This is to ensure that the key of the channel changes each re render. So the channel will actually be remade.\r\n\r\n\r\nfunction ScopeChanger(props) {\r\n    const properties = props.value\r\n    const newKeyHistory = [...props.keyHistory, props.scopeIndex]\r\n    const [currentType, setCurrentType] = useState(properties['type'])\r\n    const scopeProperties = useRef({ ...props.value })\r\n    const setDefaults = useRef(false)\r\n    let channels = []\r\n\r\n    console.log(childKey)\r\n\r\n    const typeDB = props.scopesDB[currentType]\r\n    const saveChange = (newValue) => {\r\n        const keyHistory = newValue[0]\r\n        const keyHistoryLength = keyHistory.length\r\n        let firstIndex = keyHistoryLength - 1\r\n        while (keyHistory[firstIndex] !== 'Scopes') {\r\n            firstIndex--\r\n        }\r\n        firstIndex += 2 //Add 2 because firstIndex is currently at current 'Scope'. Go to the property\r\n        let tempObj = scopeProperties.current\r\n        for (let i = firstIndex; i < keyHistoryLength - 1; i++) {\r\n            tempObj = tempObj[keyHistory[i]]\r\n        }\r\n        tempObj[keyHistory[keyHistoryLength - 1]] = newValue[1]\r\n        console.log(scopeProperties.current)\r\n    }\r\n    const sendChanges = () => {\r\n        props.onValueChange([[...props.keyHistory, props.scopeIndex], scopeProperties.current])\r\n    }\r\n    const changeScopeType = (newType) => {\r\n        setDefaults.current = true\r\n        console.log(`${currentType} | ${newType[1]}`)//[1] since first part is keyHistory\r\n\r\n        setCurrentType(newType[1])\r\n        //saveChange(newType);\r\n    }\r\n\r\n    const getDefaultChannel = () => {\r\n        let returnChannel = {}\r\n        for (const [property, value] of Object.entries(typeDB['channelProperties'])) {\r\n            returnChannel[property] = value['defaultValue']\r\n        }\r\n        return returnChannel\r\n    }\r\n    const channelUpdate = (channel) => {\r\n        if (!scopeProperties.current['activeChannels'].includes(channel)) {\r\n            console.log('Channel not enabled currently')\r\n            scopeProperties.current['activeChannels'].push(channel)\r\n            scopeProperties.current['channelsConfigSettings'][channel] = getDefaultChannel()\r\n        } else {\r\n            delete scopeProperties.current['channelsConfigSettings'][channel]\r\n            scopeProperties.current['activeChannels'].splice(scopeProperties.current['activeChannels'].indexOf(channel), 1)\r\n        }\r\n        console.log(scopeProperties.current)\r\n\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'activeChannels'], activeChannels]);\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'channelsConfigSettings'], channelProperties]);\r\n    }\r\n\r\n    const nameUpdates = (newName) => {\r\n        saveChange(newName)\r\n    }\r\n\r\n    for (let channelIndex = 1; channelIndex <= typeDB['maxChannels']; channelIndex++) {\r\n        let isActive = scopeProperties.current['activeChannels'].includes(channelIndex)\r\n        channels.push(\r\n            <ImageListItem key={++childKey}>\r\n                <ChannelChanger\r\n                    value={isActive ? scopeProperties.current['channelsConfigSettings'][channelIndex] : false}\r\n                    setDefaults={setDefaults.current}\r\n                    channelNumber={channelIndex}\r\n                    isActive={isActive}\r\n                    keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]}\r\n                    propertiesDB={typeDB['channelProperties']}\r\n                    onValueChange={saveChange}\r\n                    channelUpdate={channelUpdate}\r\n                ></ChannelChanger>\r\n            </ImageListItem>\r\n        )\r\n        \r\n    }\r\n    console.log(scopeProperties.current)\r\n\r\n    childKey++;\r\n    return (\r\n        <Grid container columns={16} spacing={1} sx={{ px: 1 }} >\r\n            {/* ROW 1 */}\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'connectionString'}\r\n                    value={properties['connectionString']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'waveFormat'}\r\n                    isDisabled={properties['waveFormat'] ? false : true}\r\n                    value={properties['waveFormat'] ? properties['waveFormat'] : 'BYTE'}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerReference'}\r\n                    isDisabled={typeDB['triggerReference']['isDisabled']}\r\n                    value={typeDB['triggerReference']['isDisabled'] || setDefaults.current ? '' : properties[typeDB['triggerReference']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={4}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'name'}\r\n                    value={properties['name']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={nameUpdates}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'filePath'}\r\n                    value={properties['filePath']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'fileFormat'}\r\n                    value={properties['fileFormat']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 1 */}\r\n            {/* ROW 2 */}\r\n            <Grid md={2}>\r\n                <ValueChanger\r\n                    property={'type'}\r\n                    value={properties['type']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={changeScopeType}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerType'}\r\n                    value={properties['triggerType']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'memSize'}\r\n                    isDisabled={typeDB['memSize']['isDisabled']}\r\n                    value={typeDB['memSize']['isDisabled'] || setDefaults.current ? typeDB['memSize']['defaultValue'] : properties[typeDB['memSize']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'tdiv'}\r\n                    isDisabled={typeDB['tdiv']['isDisabled']}\r\n                    value={typeDB['tdiv']['isDisabled'] || setDefaults.current ? typeDB['tdiv']['defaultValue'] : properties[typeDB['tdiv']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'samplingRate'}\r\n                    isDisabled={typeDB['samplingRate']['isDisabled']}\r\n                    value={typeDB['samplingRate']['isDisabled'] || setDefaults.current ? typeDB['samplingRate']['defaultValue'] : properties[typeDB['samplingRate']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'timeOffset'}\r\n                    isDisabled={typeDB['timeOffset']['isDisabled']}\r\n                    value={typeDB['timeOffset']['isDisabled'] || setDefaults.current ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerLevel'}\r\n                    isDisabled={typeDB['triggerLevel']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerLevel']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerLevel']['defaultValue']\r\n                            : properties[typeDB['triggerLevel']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerDelay'}\r\n                    isDisabled={typeDB['triggerDelay']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerDelay']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerDelay']['defaultValue']\r\n                            : properties[typeDB['triggerDelay']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 2 */}\r\n\r\n            {/* ROW 3 */}\r\n\r\n            <Grid md={16}>\r\n                <ImageList\r\n                    sx={{\r\n                        gridAutoFlow: 'column',\r\n                        gridTemplateColumns: 'repeat(auto-fill,minmax(25%,1fr)) !important',\r\n                        gridAutoColumns: 'minmax(25%, 1fr)',\r\n                        overflowY: 'hidden',\r\n                    }}\r\n                >\r\n                    {channels}\r\n                </ImageList>\r\n            </Grid>\r\n            <Grid md={16} xs={16}>\r\n                <Button variant=\"contained\" onClick={sendChanges}>\r\n                    Save Scope\r\n                </Button>\r\n            </Grid>\r\n\r\n            {/* ROW 3 */}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ScopeChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\ChannelChanger.js",["201"],[],"import React, { useState, useEffect } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport ValueChanger from './ValueChanger'\r\nimport Button from '@mui/material/Button'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nfunction ChannelChanger(props) {\r\n    const [isDisabled, setIsDisabled] = useState(!props.isActive)\r\n    const [buttonText, setButtonText] = useState(isDisabled ? 'Inactive' : 'Active')\r\n    const [isConfirmed, setIsConfirmed] = useState(false)\r\n    const typeDB = props.propertiesDB\r\n    const properties = props.value\r\n    const theme = useTheme()\r\n    const sendChange = (newValue) => {\r\n        props.onValueChange(newValue)\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (isConfirmed) {\r\n            setIsDisabled(!isDisabled)\r\n            setButtonText(isDisabled ? 'Active' : 'Inactive')\r\n            setIsConfirmed(false)\r\n            props.channelUpdate(props.channelNumber)\r\n        } else {\r\n            setButtonText('Are you sure?')\r\n            setIsConfirmed(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} sx={{ borderLeft: 'solid 2px', borderRight: 'solid 2px', px: 1 }}>\r\n            <Grid xs={12} md={12}>\r\n                <h3 style={{ marginTop: 0, marginBottom: 0 }}>Channel {props.channelNumber}</h3>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'name'}\r\n                    isDisabled={isDisabled}\r\n                    value={!properties ? typeDB['name']['defaultValue'] : properties['name']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'coupling'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['coupling']['defaultValue'] : properties['coupling']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'bwLimit'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['bwLimit']['defaultValue'] : properties['bwLimit']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'probe'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['probe']['defaultValue'] : properties['probe']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'tdiv'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['tdiv']['defaultValue'] : properties['tdiv']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'timeOffset'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'vdiv'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['vdiv']['defaultValue'] : properties[typeDB['vdiv']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'voltageOffset'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['voltageOffset']['defaultValue'] : properties[typeDB['voltageOffset']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={12}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                        ':hover': { background: theme.palette.primary.dark },\r\n                        background: isConfirmed ? theme.status.warning : isDisabled ? theme.status.disable : theme.status.enable,\r\n                        width: '100%',\r\n                        height: 50,\r\n                    }}\r\n                    onClick={handleChange}\r\n                >\r\n                    <h3>{buttonText}</h3>\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ChannelChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\index.js",[],[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\theme.js",[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\App.js",["202"],[],"import * as React from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport Controller from './Controller.js';\r\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\n\r\n\r\n\r\n\r\n\r\nexport default function App() {\r\n    const [mode, setMode] = React.useState('dark')\r\n\r\n    const theme =\r\n        createTheme({\r\n          components:{\r\n            MuiCssBaseline: {\r\n              styleOverrides: \r\n               `\r\n               /* ===== Scrollbar CSS ===== */\r\n               /* Firefox */\r\n               * {\r\n                 scrollbar-width: auto;\r\n                 scrollbar-color: #f21fa1 #2e2e2e;\r\n               }\r\n             \r\n               /* Chrome, Edge, and Safari */\r\n               *::-webkit-scrollbar {\r\n                 width: 8px;\r\n                 height: 10px;\r\n               }\r\n             \r\n               *::-webkit-scrollbar-track {\r\n                 background: #2e2e2e;\r\n                 border-radius: 13px;\r\n                 border: none\r\n               }\r\n             \r\n               *::-webkit-scrollbar-thumb {\r\n                 background-color: #f21fa1;\r\n                 border-radius: 13px;\r\n                 border: none;\r\n               }\r\n    \r\n              \r\n  \r\n\r\n               `\r\n              \r\n            }\r\n          },\r\n          palette: {\r\n            mode,\r\n            primary: {\r\n              main: '#f21fa1',\r\n              contrastText: 'white'\r\n            },\r\n            secondary: {\r\n              main: '#c9bfbb'\r\n            },\r\n          },\r\n          status:{\r\n            enable: '#00c925',\r\n            disable: '#c90000',\r\n            warning: '#d17000',\r\n          },\r\n          typography:{\r\n            fontSize: 12,\r\n            fontFamily: [\r\n              '-apple-system',\r\n              'BlinkMacSystemFont',\r\n              '\"Segoe UI\"',\r\n              'Roboto',\r\n              '\"Helvetica Neue\"',\r\n              'Arial',\r\n              'sans-serif',\r\n              '\"Apple Color Emoji\"',\r\n              '\"Segoe UI Emoji\"',\r\n              '\"Segoe UI Symbol\"',\r\n            ].join(','),\r\n          }\r\n        })\r\n    \r\n    fetch('/profileInfo').then(res => {\r\n      res.json().then(isDarkMode => {\r\n        setMode(isDarkMode.isDarkMode ? 'dark' : 'light')\r\n      })\r\n    })\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline>\r\n          <Container maxWidth=\"xl\" >\r\n              <Controller name=\"uv\"></Controller>\r\n          </Container>\r\n        </CssBaseline>\r\n  \r\n      </ThemeProvider>\r\n    \r\n    );\r\n\r\n\r\n \r\n\r\n}\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Controller.js",["203"],[],"import Button from '@mui/material/Button'\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport Client from './Client.js'\r\nimport React, { useState } from 'react'\r\n\r\nimport { loadYAML } from './YAML.js'\r\nlet mainConfig\r\n//Value:Label Mappings,\r\n//collapsbible, make scopes to names instead of numbers, change to array for order,\r\nfunction Controller(props) {\r\n    const [clients, setClients] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const yamlFile = loadYAML('test.yml')\r\n\r\n    const homeButton = (<Button href={'/home'}>Home</Button>)\r\n    console.log('Controller rerender')\r\n\r\n    const changeValue = ([clientNumber, [keyHistory, newValue]]) => {\r\n        //Array destructuring. Will take the array of property and value and make it into two variables.\r\n        let client = mainConfig[clientNumber]\r\n        //console.log(client);\r\n        console.log(keyHistory)\r\n        console.log(newValue)\r\n        for (let i = 0; i < keyHistory.length - 1; i++) {\r\n            //Go through keyhistory (except last one). Now client is pointing to the last object which is the {proprety: value}.\r\n            client = client[keyHistory[i]]\r\n        }\r\n        client[keyHistory[keyHistory.length - 1]] = newValue\r\n        //     console.log(client);\r\n        console.log(mainConfig)\r\n    }\r\n    const generateClients = (json, propertiesDB, scopesDB) => {\r\n        let tempArray = []\r\n        for (const [clientNumber, clientData] of Object.entries(json)) {\r\n            tempArray.push(\r\n                <Client\r\n                    sx={{}}\r\n                    key={clientNumber}\r\n                    clientNumber={clientNumber}\r\n                    properties={clientData}\r\n                    propertiesDB={propertiesDB}\r\n                    scopesDB={scopesDB}\r\n                    onValueChange={changeValue}\r\n                ></Client>\r\n            )\r\n        }\r\n        return tempArray\r\n    }\r\n\r\n    const getData = async () => {\r\n        console.log(document.cookie)\r\n        try {\r\n            const req = await fetch(`/getData/`, { method: 'GET' })\r\n            const json = await req.json()\r\n            return json\r\n        } catch (err) {\r\n            console.log('Error fetching data')\r\n        }\r\n    }\r\n    const initController = async () => {\r\n        const data = await getData()\r\n        const propertiesDB = data['propertiesDB']\r\n        const scopesDB = data['scopesDB']\r\n        console.log(data)\r\n        mainConfig = data['clients']\r\n        let tempClients = generateClients(data['clients'], propertiesDB, scopesDB) //Properties DB seems to be passes by reference\r\n        setClients(tempClients)\r\n    }\r\n\r\n    const saveChanges = async () => {\r\n        console.log('Saving: ')\r\n        try {\r\n            await fetch(`/getData/`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(mainConfig),\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    if (clients.length > 0) {\r\n        return (\r\n            <div style={{ textAlign: 'center', marginBottom: 20}}>\r\n                {homeButton}\r\n                <h1>Controls</h1>\r\n                {clients}\r\n                {/* <Client properties={properties} onValueChange={changeValue}></Client> */}\r\n                {/* <ValueChanger onValueChange={sendChange} name=\"temperature\" value={10}></ValueChanger> */}\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => saveChanges()} sx={{marginTop: 1, width: 1}}>\r\n                    Save Changes\r\n                </Button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{marginTop: '50px'}}>\r\n                {homeButton}\r\n                  <LoadingButton\r\n          onClick={() => {\r\n            setIsLoading(true)\r\n            initController()\r\n          }}\r\n          loading={isLoading}\r\n          loadingIndicator=\"Loading…\"\r\n          variant=\"contained\"\r\n        >\r\n          Fetch data\r\n        </LoadingButton>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controller\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Client.js",[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\YAML.js",[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ValueChanger.js",["204","205","206"],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\SliderChanger.js",["207"],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Section.js",["208","209","210","211"],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\BooleanChanger.js",[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\DropdownChanger.js",["212"],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ScopeChanger.js",["213","214","215","216","217"],[],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport Box from '@mui/material/Box'\r\nimport { Accordion, AccordionSummary, AccordionDetails, Button } from '@mui/material'\r\n\r\nimport ImageList from '@mui/material/ImageList'\r\nimport ImageListItem from '@mui/material/ImageListItem'\r\nimport ValueChanger from './ValueChanger'\r\nimport ChannelChanger from './ChannelChanger.js'\r\n\r\nlet childKey = 0 //This is to ensure that the key of the channel changes each re render. So the channel will actually be remade.\r\n\r\n\r\nfunction ScopeChanger(props) {\r\n    const properties = props.value\r\n    const newKeyHistory = [...props.keyHistory, props.scopeIndex]\r\n    const [currentType, setCurrentType] = useState(properties['type'])\r\n    const scopeProperties = useRef({ ...props.value })\r\n    const setDefaults = useRef(false)\r\n    let channels = []\r\n\r\n    console.log(childKey)\r\n\r\n    const typeDB = props.scopesDB[currentType]\r\n    const saveChange = (newValue) => {\r\n        const keyHistory = newValue[0]\r\n        const keyHistoryLength = keyHistory.length\r\n        let firstIndex = keyHistoryLength - 1\r\n        while (keyHistory[firstIndex] !== 'Scopes') {\r\n            firstIndex--\r\n        }\r\n        firstIndex += 2 //Add 2 because firstIndex is currently at current 'Scope'. Go to the property\r\n        let tempObj = scopeProperties.current\r\n        for (let i = firstIndex; i < keyHistoryLength - 1; i++) {\r\n            tempObj = tempObj[keyHistory[i]]\r\n        }\r\n        tempObj[keyHistory[keyHistoryLength - 1]] = newValue[1]\r\n        console.log(scopeProperties.current)\r\n    }\r\n    const sendChanges = () => {\r\n        props.onValueChange([[...props.keyHistory, props.scopeIndex], scopeProperties.current])\r\n    }\r\n    const changeScopeType = (newType) => {\r\n        setDefaults.current = true\r\n        console.log(`${currentType} | ${newType[1]}`)//[1] since first part is keyHistory\r\n\r\n        setCurrentType(newType[1])\r\n        //saveChange(newType);\r\n    }\r\n\r\n    const getDefaultChannel = () => {\r\n        let returnChannel = {}\r\n        for (const [property, value] of Object.entries(typeDB['channelProperties'])) {\r\n            returnChannel[property] = value['defaultValue']\r\n        }\r\n        return returnChannel\r\n    }\r\n    const channelUpdate = (channel) => {\r\n        if (!scopeProperties.current['activeChannels'].includes(channel)) {\r\n            console.log('Channel not enabled currently')\r\n            scopeProperties.current['activeChannels'].push(channel)\r\n            scopeProperties.current['channelsConfigSettings'][channel] = getDefaultChannel()\r\n        } else {\r\n            delete scopeProperties.current['channelsConfigSettings'][channel]\r\n            scopeProperties.current['activeChannels'].splice(scopeProperties.current['activeChannels'].indexOf(channel), 1)\r\n        }\r\n        console.log(scopeProperties.current)\r\n\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'activeChannels'], activeChannels]);\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'channelsConfigSettings'], channelProperties]);\r\n    }\r\n\r\n    const nameUpdates = (newName) => {\r\n        saveChange(newName)\r\n    }\r\n\r\n    for (let channelIndex = 1; channelIndex <= typeDB['maxChannels']; channelIndex++) {\r\n        let isActive = scopeProperties.current['activeChannels'].includes(channelIndex)\r\n        channels.push(\r\n            <ImageListItem key={++childKey}>\r\n                <ChannelChanger\r\n                    value={isActive ? scopeProperties.current['channelsConfigSettings'][channelIndex] : false}\r\n                    setDefaults={setDefaults.current}\r\n                    channelNumber={channelIndex}\r\n                    isActive={isActive}\r\n                    keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]}\r\n                    propertiesDB={typeDB['channelProperties']}\r\n                    onValueChange={saveChange}\r\n                    channelUpdate={channelUpdate}\r\n                ></ChannelChanger>\r\n            </ImageListItem>\r\n        )\r\n        \r\n    }\r\n    console.log(scopeProperties.current)\r\n\r\n    childKey++;\r\n    return (\r\n        <Grid container columns={16} spacing={1} sx={{ px: 1 }} >\r\n            {/* ROW 1 */}\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'connectionString'}\r\n                    value={properties['connectionString']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'waveFormat'}\r\n                    isDisabled={properties['waveFormat'] ? false : true}\r\n                    value={properties['waveFormat'] ? properties['waveFormat'] : 'BYTE'}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerReference'}\r\n                    isDisabled={typeDB['triggerReference']['isDisabled']}\r\n                    value={typeDB['triggerReference']['isDisabled'] || setDefaults.current ? '' : properties[typeDB['triggerReference']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={4}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'name'}\r\n                    value={properties['name']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={nameUpdates}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'filePath'}\r\n                    value={properties['filePath']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'fileFormat'}\r\n                    value={properties['fileFormat']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 1 */}\r\n            {/* ROW 2 */}\r\n            <Grid md={2}>\r\n                <ValueChanger\r\n                    property={'type'}\r\n                    value={properties['type']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={changeScopeType}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerType'}\r\n                    value={properties['triggerType']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'memSize'}\r\n                    isDisabled={typeDB['memSize']['isDisabled']}\r\n                    value={typeDB['memSize']['isDisabled'] || setDefaults.current ? typeDB['memSize']['defaultValue'] : properties[typeDB['memSize']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'tdiv'}\r\n                    isDisabled={typeDB['tdiv']['isDisabled']}\r\n                    value={typeDB['tdiv']['isDisabled'] || setDefaults.current ? typeDB['tdiv']['defaultValue'] : properties[typeDB['tdiv']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'samplingRate'}\r\n                    isDisabled={typeDB['samplingRate']['isDisabled']}\r\n                    value={typeDB['samplingRate']['isDisabled'] || setDefaults.current ? typeDB['samplingRate']['defaultValue'] : properties[typeDB['samplingRate']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'timeOffset'}\r\n                    isDisabled={typeDB['timeOffset']['isDisabled']}\r\n                    value={typeDB['timeOffset']['isDisabled'] || setDefaults.current ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerLevel'}\r\n                    isDisabled={typeDB['triggerLevel']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerLevel']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerLevel']['defaultValue']\r\n                            : properties[typeDB['triggerLevel']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerDelay'}\r\n                    isDisabled={typeDB['triggerDelay']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerDelay']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerDelay']['defaultValue']\r\n                            : properties[typeDB['triggerDelay']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 2 */}\r\n\r\n            {/* ROW 3 */}\r\n\r\n            <Grid md={16}>\r\n                <ImageList\r\n                    sx={{\r\n                        gridAutoFlow: 'column',\r\n                        gridTemplateColumns: 'repeat(auto-fill,minmax(25%,1fr)) !important',\r\n                        gridAutoColumns: 'minmax(25%, 1fr)',\r\n                        overflowY: 'hidden',\r\n          \r\n                    }}\r\n                >\r\n                    {channels}\r\n                </ImageList>\r\n            </Grid>\r\n            <Grid md={16} xs={16}>\r\n                <Button variant=\"contained\" onClick={sendChanges}>\r\n                    Save Scope\r\n                </Button>\r\n            </Grid>\r\n\r\n            {/* ROW 3 */}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ScopeChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\CollapsibleChanger.js",["218","219","220","221","222","223"],[],"import ValueChanger from './ValueChanger'\r\nimport Grid from '@mui/material/Unstable_Grid2' // Grid version 2\r\nimport Stack from '@mui/material/Stack'\r\nimport React, { useState } from 'react'\r\nimport Select from '@mui/material/Select'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport { Menu } from '@mui/material'\r\nimport ScopeChanger from './ScopeChanger'\r\nimport { Accordion, AccordionSummary, AccordionDetails } from '@mui/material'\r\n\r\nfunction CollapsibleChanger(props) {\r\n    const [refresh, setRefresh] = useState(false);\r\n    const sendChange = (newValue) => {\r\n        setRefresh(!refresh);//May need to check if value changed was name\r\n        props.onValueChange(newValue)\r\n    }\r\n    console.log(props.scopesDB)\r\n    let items = []\r\n    if(props.property == 'Scopes'){\r\n        for (const [itemNumber, itemValue] of Object.entries(props.value)) {\r\n            items.push(\r\n                <Accordion key={itemNumber} TransitionProps={{ unmountOnExit: true }}>\r\n                    <AccordionSummary>{itemValue.name}</AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <ScopeChanger\r\n                            value={itemValue}\r\n                            propertiesDB={props.propertiesDB}\r\n                            keyHistory={props.keyHistory}\r\n                            scopesDB={props.scopesDB}\r\n                            scopeIndex={itemNumber}\r\n                            onValueChange={sendChange}\r\n                        ></ScopeChanger>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            )\r\n        }\r\n    }\r\n    else{\r\n        for (const [property, value] of Object.entries(props.value)){\r\n            items.push(\r\n                <Accordion key={property} TransitionProps={{ unmountOnExit: true }}>\r\n                <AccordionSummary>{property}</AccordionSummary>\r\n                <AccordionDetails>\r\n                    <ValueChanger\r\n                        property={property}\r\n                        keyHistory={props.keyHistory}\r\n                        value={value}\r\n                        propertiesDB={props.propertiesDB}\r\n                        onValueChange={sendChange}\r\n                    ></ValueChanger>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n            )\r\n        } \r\n    }\r\n\r\n\r\n    return <div>{items}</div>\r\n\r\n    //     const [currentIndex, setCurrentIndex] = useState(-1);\r\n    //     let valueChangerList = [];\r\n    //     let dropdownItems = [\r\n    //     <MenuItem key={-1} value={-1}>\r\n    //         Hide {props.property}\r\n    //     </MenuItem>\r\n    //     ];\r\n\r\n    //     const sendChange = (newValue) => {\r\n    //         // console.log(currentIndex);\r\n    //         // console.log(props.property);\r\n    //         // console.log(newValue);\r\n    //         // let x = new Object;\r\n    //         // x[currentIndex] = new Object();\r\n    //         // x[currentIndex][newValue[0]] = newValue[1];\r\n    //         // console.log(x);\r\n    //         console.log(newValue)\r\n    //         props.onValueChange(newValue)\r\n    //     }\r\n    //     const handleChange = (event) => {\r\n    //         setCurrentIndex(event.target.value);\r\n    //     }\r\n    //     console.log(props.value);\r\n\r\n    //     for(const [itemNumber, itemValue] of Object.entries(props.value)){\r\n    //         let tempArray = [];\r\n    //         dropdownItems.push(\r\n    //             <MenuItem key={itemNumber} value={itemNumber}>\r\n    //                 {itemValue.name}\r\n    //             </MenuItem>\r\n    //         )\r\n    //         for(const [property, value] of Object.entries(itemValue)){\r\n    //             tempArray.push(\r\n    //                 <Grid key={property} xs={12} sm={6} md={4} xl={3} sx={{pr: 1, pb: 1}}>\r\n    //                     <ValueChanger hasBorder={true} key={props.propertiesDB[property]['id']} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n    //                 </Grid>\r\n    //             )\r\n    //         }\r\n    //         valueChangerList.push(\r\n    //             <Accordion key={itemNumber} defaultExpanded={false} expanded={currentIndex == itemNumber}>\r\n    //                 <AccordionSummary>\r\n    //                     {itemValue.name}\r\n    //                 </AccordionSummary>\r\n    //                 <AccordionDetails>\r\n    //                     <Grid container>\r\n    //                         {tempArray}\r\n    //                     </Grid>\r\n    //                 </AccordionDetails>\r\n    //             </Accordion>\r\n\r\n    //         )\r\n    //     }\r\n\r\n    //     /*keys are how react knows to re-render.\r\n    //     Since every item has same properties and COULD have same value,\r\n    //     we must use something unique. Which is the index + currentIndex to always\r\n    //     make sure we have an offset. We guarantee this offset and uniqueness of keys by multiplying the currentIndex by the items length.\r\n    //     If items 1,2,3 have 3 properties. (index starts at 1) The keys for item 1: 3,4,5. For item 2: 6,7,8 item:3 9,10,11\r\n    //     */\r\n    //     // for(const [property, value] of Object.entries(props.value[currentIndex])){//Change the one to set to the first element. //MAKE THIS A DROP DOWN TO SELECT WHICH PROPERTIES\r\n    //     //     console.log(value);\r\n    //     //     valueChangerList.push(\r\n    //     //         <ValueChanger hasBorder={true} key={keyIndex} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n    //     //     )\r\n    //     //     keyIndex++;\r\n    //     // }\r\n    //    // const [valueChangerList, setValueChangerList] = useState(ta);\r\n\r\n    //     return(\r\n\r\n    //         <Stack spacing={1} sx={{pl: 0,}}>\r\n    //             <Select value={currentIndex} onChange={handleChange} sx={{}}>\r\n    //                 {dropdownItems}\r\n    //             </Select>\r\n    //             {valueChangerList}\r\n    //         </Stack>\r\n\r\n    //     )\r\n}\r\n\r\nexport default CollapsibleChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\TextChanger.js",["224","225","226"],[],"import React, { useState } from 'react'\r\nimport TextField from '@mui/material/TextField'\r\nimport { textAlign } from '@mui/system'\r\nfunction TextChanger(props) {\r\n    let isWaiting = false\r\n    let timeout\r\n    const handleChange = (event) => {\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(() => {\r\n            isWaiting = false\r\n            props.onValueChange([props.keyHistory, event.target.value])\r\n        }, 1000)\r\n    }\r\n\r\n    return (\r\n        <TextField\r\n            disabled={props.isDisabled}\r\n            size=\"small\"\r\n            sx={{ mb: 1 }}\r\n            inputProps={{ style: { textAlign: 'center', fontSize: '1em' } }}\r\n            defaultValue={props.value}\r\n            onChange={handleChange}\r\n        ></TextField>\r\n    )\r\n}\r\n\r\nexport default TextChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ChannelChanger.js",["227"],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ListChanger.js",["228","229","230","231","232"],[],"import React, { useRef, useState } from 'react'\r\nimport TextField from '@mui/material/TextField'\r\nimport List from '@mui/material/List'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport ListItemText from '@mui/material/ListItemText'\r\nimport ListItemButton from '@mui/material/ListItemButton'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport AddItemIcon from '@mui/icons-material/PostAdd';\r\nimport Box from '@mui/material/Box'\r\n \r\n\r\nimport { textAlign } from '@mui/system'\r\nimport { Container, IconButton, Button } from '@mui/material'\r\nfunction ListChanger(props) {\r\n    const isArray = !props.propertiesDB[props.property].hasKeys\r\n    const [values, setValues] = useState(isArray ? props.value : Object.entries(props.value))\r\n    console.log(values)\r\n    const handleTextChange = (event, i, isKey=null) => {//j is set to null by default. Unless we have a key value item\r\n        let tempArray = [...values]//Arrays are passed as reference so force to be value\r\n        if(isArray){\r\n            tempArray[i] = event.target.value\r\n            console.log(tempArray)\r\n        }\r\n        else{\r\n            tempArray[i][isKey ? 0 : 1] = event.target.value//i s which field. j is whether key or value\r\n        }\r\n\r\n        setValues(tempArray)\r\n    }\r\n\r\n    const handleDeleteButton = (i) => {\r\n        console.log(\"delete: \" + i)\r\n        let tempArray = [...values];\r\n        tempArray.splice(i, 1)\r\n        setValues(tempArray)\r\n    }\r\n    \r\n    const addItem = () => {\r\n        \r\n        setValues(currentValues => [...currentValues, isArray ? '' : ['','']])\r\n    }\r\n    \r\n    const saveChange = () => {\r\n\r\n        props.onValueChange([props.keyHistory, isArray ? values : Object.fromEntries(values)])\r\n        \r\n\r\n    }\r\n    let items = []\r\n\r\n        if(isArray){\r\n            for(let i in values){\r\n                items.push(\r\n                    <ListItem key={i} \r\n                secondaryAction={\r\n                    <IconButton disabled={props.isDisabled}onClick={x => {handleDeleteButton(i) } }>\r\n                        <DeleteIcon/>\r\n                    </IconButton>\r\n                }>\r\n                     <TextField disabled={props.isDisabled }size=\"small\" \r\n                     value={values[i]} \r\n                     sx={{width: '100%', mx: 1}} \r\n                     onChange={e => handleTextChange(e,i)}>\r\n        \r\n                    </TextField>   \r\n                    \r\n                </ListItem>\r\n                )\r\n            }\r\n            return (\r\n                <Container maxWidth=\"xs\">\r\n                    <List sx={{borderRadius: 2,bgcolor: 'background.paper' }} dense={true}>\r\n                            {items}\r\n                       \r\n                            <IconButton disabled={props.isDisabled} onClick={addItem}>\r\n                                <AddItemIcon/>\r\n                            </IconButton>\r\n                       \r\n                        </List>\r\n                    <Button disabled={props.isDisabled} variant=\"contained\" size=\"small\" sx={{width: '100%'}} onClick={saveChange}>\r\n                        Save \r\n                    </Button>\r\n                </Container>\r\n          \r\n        \r\n                \r\n            )\r\n        }\r\n        else{\r\n            for(let i in values){\r\n                items.push(\r\n                    <ListItem key={i} \r\n                    secondaryAction={\r\n                        <IconButton disabled={props.isDisabled}onClick={() => {handleDeleteButton(i) } }>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    }>\r\n                         <TextField disabled={props.isDisabled }size=\"small\" \r\n                         value={values[i][0]} \r\n                        \r\n                         onChange={e => handleTextChange(e, i, true)}>\r\n            \r\n                        </TextField>\r\n    \r\n                        <TextField disabled={props.isDisabled } size=\"small\" \r\n                         value={values[i][1]} \r\n                        \r\n                         onChange={e => handleTextChange(e, i, false)}>\r\n            \r\n                        </TextField>   \r\n                        \r\n                    </ListItem>\r\n                )\r\n            }\r\n            return(\r\n                <Container maxWidth=\"xs\">\r\n                <List sx={{borderRadius: 2,bgcolor: 'background.paper' }} dense={true}>\r\n                        {items}\r\n                   \r\n                        <IconButton disabled={props.isDisabled} onClick={addItem}>\r\n                            <AddItemIcon/>\r\n                        </IconButton>\r\n                   \r\n                    </List>\r\n                <Button disabled={props.isDisabled} variant=\"contained\" size=\"small\" sx={{width: '100%'}} onClick={saveChange}>\r\n                    Save \r\n                </Button>\r\n            </Container>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ListChanger\r\n",{"ruleId":"233","severity":1,"message":"234","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":11},{"ruleId":"233","severity":1,"message":"237","line":13,"column":11,"nodeType":"235","messageId":"236","endLine":13,"endColumn":19},{"ruleId":"233","severity":1,"message":"238","line":2,"column":16,"nodeType":"235","messageId":"236","endLine":2,"endColumn":25},{"ruleId":"233","severity":1,"message":"239","line":11,"column":10,"nodeType":"235","messageId":"236","endLine":11,"endColumn":19},{"ruleId":"240","severity":1,"message":"241","line":53,"column":5,"nodeType":"242","messageId":"243","endLine":144,"endColumn":6},{"ruleId":"233","severity":1,"message":"244","line":4,"column":8,"nodeType":"235","messageId":"236","endLine":4,"endColumn":14},{"ruleId":"233","severity":1,"message":"238","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"245","line":12,"column":9,"nodeType":"235","messageId":"236","endLine":12,"endColumn":10},{"ruleId":"233","severity":1,"message":"246","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":12},{"ruleId":"233","severity":1,"message":"247","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":13},{"ruleId":"233","severity":1,"message":"248","line":5,"column":8,"nodeType":"235","messageId":"236","endLine":5,"endColumn":14},{"ruleId":"233","severity":1,"message":"249","line":6,"column":8,"nodeType":"235","messageId":"236","endLine":6,"endColumn":16},{"ruleId":"233","severity":1,"message":"250","line":7,"column":10,"nodeType":"235","messageId":"236","endLine":7,"endColumn":14},{"ruleId":"251","severity":1,"message":"252","line":19,"column":23,"nodeType":"253","messageId":"254","endLine":19,"endColumn":25},{"ruleId":"233","severity":1,"message":"255","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":25},{"ruleId":"233","severity":1,"message":"256","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":19},{"ruleId":"233","severity":1,"message":"257","line":5,"column":9,"nodeType":"235","messageId":"236","endLine":5,"endColumn":18},{"ruleId":"233","severity":1,"message":"238","line":1,"column":27,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":11},{"ruleId":"233","severity":1,"message":"258","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":19},{"ruleId":"233","severity":1,"message":"259","line":4,"column":21,"nodeType":"235","messageId":"236","endLine":4,"endColumn":37},{"ruleId":"233","severity":1,"message":"260","line":4,"column":39,"nodeType":"235","messageId":"236","endLine":4,"endColumn":55},{"ruleId":"233","severity":1,"message":"238","line":1,"column":27,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":11},{"ruleId":"233","severity":1,"message":"237","line":13,"column":11,"nodeType":"235","messageId":"236","endLine":13,"endColumn":19},{"ruleId":"233","severity":1,"message":"238","line":2,"column":16,"nodeType":"235","messageId":"236","endLine":2,"endColumn":25},{"ruleId":"233","severity":1,"message":"239","line":12,"column":10,"nodeType":"235","messageId":"236","endLine":12,"endColumn":19},{"ruleId":"240","severity":1,"message":"241","line":54,"column":5,"nodeType":"242","messageId":"243","endLine":158,"endColumn":6},{"ruleId":"233","severity":1,"message":"244","line":4,"column":8,"nodeType":"235","messageId":"236","endLine":4,"endColumn":14},{"ruleId":"233","severity":1,"message":"247","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":13},{"ruleId":"251","severity":1,"message":"252","line":15,"column":32,"nodeType":"253","messageId":"254","endLine":15,"endColumn":34},{"ruleId":"251","severity":1,"message":"252","line":16,"column":28,"nodeType":"253","messageId":"254","endLine":16,"endColumn":30},{"ruleId":"251","severity":1,"message":"252","line":17,"column":22,"nodeType":"253","messageId":"254","endLine":17,"endColumn":24},{"ruleId":"233","severity":1,"message":"238","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"238","line":1,"column":27,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"234","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":11},{"ruleId":"233","severity":1,"message":"258","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":19},{"ruleId":"233","severity":1,"message":"259","line":4,"column":21,"nodeType":"235","messageId":"236","endLine":4,"endColumn":37},{"ruleId":"233","severity":1,"message":"260","line":4,"column":39,"nodeType":"235","messageId":"236","endLine":4,"endColumn":55},{"ruleId":"233","severity":1,"message":"246","line":2,"column":8,"nodeType":"235","messageId":"236","endLine":2,"endColumn":12},{"ruleId":"233","severity":1,"message":"247","line":3,"column":8,"nodeType":"235","messageId":"236","endLine":3,"endColumn":13},{"ruleId":"233","severity":1,"message":"248","line":5,"column":8,"nodeType":"235","messageId":"236","endLine":5,"endColumn":14},{"ruleId":"233","severity":1,"message":"249","line":6,"column":8,"nodeType":"235","messageId":"236","endLine":6,"endColumn":16},{"ruleId":"233","severity":1,"message":"250","line":7,"column":10,"nodeType":"235","messageId":"236","endLine":7,"endColumn":14},{"ruleId":"251","severity":1,"message":"252","line":19,"column":23,"nodeType":"253","messageId":"254","endLine":19,"endColumn":25},{"ruleId":"233","severity":1,"message":"255","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":25},{"ruleId":"233","severity":1,"message":"256","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":19},{"ruleId":"233","severity":1,"message":"257","line":5,"column":9,"nodeType":"235","messageId":"236","endLine":5,"endColumn":18},{"ruleId":"233","severity":1,"message":"238","line":1,"column":27,"nodeType":"235","messageId":"236","endLine":1,"endColumn":36},{"ruleId":"233","severity":1,"message":"261","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":23},{"ruleId":"233","severity":1,"message":"262","line":5,"column":8,"nodeType":"235","messageId":"236","endLine":5,"endColumn":20},{"ruleId":"233","severity":1,"message":"263","line":6,"column":8,"nodeType":"235","messageId":"236","endLine":6,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":9,"column":8,"nodeType":"235","messageId":"236","endLine":9,"endColumn":11},{"ruleId":"233","severity":1,"message":"256","line":12,"column":10,"nodeType":"235","messageId":"236","endLine":12,"endColumn":19},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'yamlFile' is assigned a value but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Slider' is defined but never used.","'i' is assigned a value but never used.","'Grid' is defined but never used.","'Stack' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'textAlign' is defined but never used.","'isWaiting' is assigned a value but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'useRef' is defined but never used.","'ListItemText' is defined but never used.","'ListItemButton' is defined but never used."]