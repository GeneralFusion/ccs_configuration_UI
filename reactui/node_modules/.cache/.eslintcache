[{"C:\\Code\\ReactUI\\React\\reactui\\src\\index.js":"1","C:\\Code\\ReactUI\\React\\reactui\\src\\reportWebVitals.js":"2","C:\\Code\\ReactUI\\React\\reactui\\src\\App.js":"3","C:\\Code\\ReactUI\\React\\reactui\\src\\Controller.js":"4","C:\\Code\\ReactUI\\React\\reactui\\src\\ValueChanger.js":"5","C:\\Code\\ReactUI\\React\\reactui\\src\\YAML.js":"6","C:\\Code\\ReactUI\\React\\reactui\\src\\Client.js":"7","C:\\Code\\ReactUI\\React\\reactui\\src\\SliderChanger.js":"8","C:\\Code\\ReactUI\\React\\reactui\\src\\BooleanChanger.js":"9","C:\\Code\\ReactUI\\React\\reactui\\src\\theme.js":"10","C:\\Code\\ReactUI\\React\\reactui\\src\\DropdownChanger.js":"11","C:\\Code\\ReactUI\\React\\reactui\\src\\Section.js":"12","C:\\Code\\ReactUI\\React\\reactui\\src\\CollapsibleChanger.js":"13","C:\\Code\\ReactUI\\React\\reactui\\src\\TextChanger.js":"14","C:\\Code\\ReactUI\\React\\reactui\\src\\ScopeChanger.js":"15","C:\\Code\\ReactUI\\React\\reactui\\src\\ChannelChanger.js":"16"},{"size":526,"mtime":1663009797584,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1663084836497,"results":"19","hashOfConfig":"18"},{"size":1603,"mtime":1664810362439,"results":"20","hashOfConfig":"18"},{"size":4104,"mtime":1664562814058,"results":"21","hashOfConfig":"18"},{"size":5346,"mtime":1664567241496,"results":"22","hashOfConfig":"18"},{"size":1023,"mtime":1663086038054,"results":"23","hashOfConfig":"18"},{"size":2173,"mtime":1664816484893,"results":"24","hashOfConfig":"18"},{"size":1639,"mtime":1664552526358,"results":"25","hashOfConfig":"18"},{"size":562,"mtime":1664382176156,"results":"26","hashOfConfig":"18"},{"size":335,"mtime":1663009797615,"results":"27","hashOfConfig":"18"},{"size":1579,"mtime":1664566271087,"results":"28","hashOfConfig":"18"},{"size":994,"mtime":1664382174436,"results":"29","hashOfConfig":"18"},{"size":6140,"mtime":1664814941540,"results":"30","hashOfConfig":"18"},{"size":792,"mtime":1664815373411,"results":"31","hashOfConfig":"18"},{"size":11891,"mtime":1664564285643,"results":"32","hashOfConfig":"18"},{"size":5828,"mtime":1664398994159,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"6i77mg",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},"C:\\Code\\ReactUI\\React\\reactui\\src\\index.js",[],[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\reportWebVitals.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\App.js",["91"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\Controller.js",["92"],[],"import Button from '@mui/material/Button'\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport Client from './Client.js'\r\nimport React, { useState } from 'react'\r\n\r\nimport { loadYAML } from './YAML.js'\r\nlet mainConfig\r\n//Value:Label Mappings,\r\n//collapsbible, make scopes to names instead of numbers, change to array for order,\r\nfunction Controller(props) {\r\n    const [clients, setClients] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const yamlFile = loadYAML('test.yml')\r\n\r\n    const homeButton = (<Button href={'/home'}>Home</Button>)\r\n    console.log('Controller rerender')\r\n\r\n    const changeValue = ([clientNumber, [keyHistory, newValue]]) => {\r\n        //Array destructuring. Will take the array of property and value and make it into two variables.\r\n        let client = mainConfig[clientNumber]\r\n        //console.log(client);\r\n        console.log(keyHistory)\r\n        console.log(newValue)\r\n        for (let i = 0; i < keyHistory.length - 1; i++) {\r\n            //Go through keyhistory (except last one). Now client is pointing to the last object which is the {proprety: value}.\r\n            client = client[keyHistory[i]]\r\n        }\r\n        client[keyHistory[keyHistory.length - 1]] = newValue\r\n        //     console.log(client);\r\n        console.log(mainConfig)\r\n    }\r\n    const generateClients = (json, propertiesDB, scopesDB) => {\r\n        let tempArray = []\r\n        for (const [clientNumber, clientData] of Object.entries(json)) {\r\n            tempArray.push(\r\n                <Client\r\n                    sx={{}}\r\n                    key={clientNumber}\r\n                    clientNumber={clientNumber}\r\n                    properties={clientData}\r\n                    propertiesDB={propertiesDB}\r\n                    scopesDB={scopesDB}\r\n                    onValueChange={changeValue}\r\n                ></Client>\r\n            )\r\n        }\r\n        return tempArray\r\n    }\r\n\r\n    const getData = async () => {\r\n        try {\r\n            const req = await fetch(`/getData/`, { method: 'GET' })\r\n            const json = await req.json()\r\n            return json\r\n        } catch (err) {\r\n            console.log('Error fetching data')\r\n        }\r\n    }\r\n    const initController = async () => {\r\n        const data = await getData()\r\n        const propertiesDB = data['propertiesDB']\r\n        const scopesDB = data['scopesDB']\r\n        console.log(data)\r\n        mainConfig = data['clients']\r\n        let tempClients = generateClients(data['clients'], propertiesDB, scopesDB) //Properties DB seems to be passes by reference\r\n        setClients(tempClients)\r\n    }\r\n\r\n    const saveChanges = async () => {\r\n        console.log('Saving: ')\r\n        try {\r\n            await fetch(`/getData/`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(mainConfig),\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    if (clients.length > 0) {\r\n        return (\r\n            <div style={{ textAlign: 'center', marginBottom: 20}}>\r\n                {homeButton}\r\n                <h1>Controls</h1>\r\n                {clients}\r\n                {/* <Client properties={properties} onValueChange={changeValue}></Client> */}\r\n                {/* <ValueChanger onValueChange={sendChange} name=\"temperature\" value={10}></ValueChanger> */}\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => saveChanges()} sx={{marginTop: 1, width: 1}}>\r\n                    Save Changes\r\n                </Button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{marginTop: '50px'}}>\r\n                {homeButton}\r\n                  <LoadingButton\r\n          onClick={() => {\r\n            setIsLoading(true)\r\n            initController()\r\n          }}\r\n          loading={isLoading}\r\n          loadingIndicator=\"Loadingâ€¦\"\r\n          variant=\"contained\"\r\n        >\r\n          Fetch data\r\n        </LoadingButton>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controller\r\n",[],"C:\\Code\\ReactUI\\React\\reactui\\src\\ValueChanger.js",["93","94","95"],[],"import SliderChanger from './SliderChanger.js'\r\nimport React, {useEffect} from 'react'\r\nimport { Box, Paper } from '@mui/material/'\r\nimport BooleanChanger from './BooleanChanger.js'\r\nimport DropdownChanger from './DropdownChanger.js'\r\nimport Section from './Section.js'\r\nimport CollapsibleChanger from './CollapsibleChanger.js'\r\nimport TextChanger from './TextChanger.js'\r\nimport ScopeChanger from './ScopeChanger.js'\r\n\r\nimport { Component } from 'react'\r\n\r\nfunction ValueChanger(props) {\r\n    //Add steps and min and max ranges.\r\n    const [valueChanger, isLarge] = createValueChanger(props)\r\n    const fontSize = 13//Math.min(160 / props.propertiesDB[props.property].name.length, 13) \r\n    if(isLarge){\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={{ px: 1,textAlign: 'center', border: props.hasBorder ? 'solid 0px' : 'none' }}>\r\n                    <h2 style={{ fontSize: 20 }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={{ px: 1, minHeight: 70, maxHeight: 70,height: 70,textAlign: 'center', border: props.hasBorder ? 'solid 0px' : 'none' }}>\r\n                    <h2 style={{ fontSize: fontSize }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nfunction createValueChanger(props) {\r\n    const sendChange = (newValue) => {\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    const getOptions = (property) => {\r\n        return props.propertiesDB[property]['options'] //Only place to change this\r\n    }\r\n    let valueChangerComponent\r\n    let isLarge = false\r\n    const componentType = props.propertiesDB[props.property]['type']\r\n    const newKeyHistory = [...props.keyHistory, props.property]\r\n\r\n    switch (\r\n        componentType //THIS WILL BE THE LOOKUP TABLE\r\n    ) {\r\n        case 'boolean':\r\n            valueChangerComponent = (\r\n                <BooleanChanger\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                ></BooleanChanger>\r\n            )\r\n            break\r\n        case 'slider':\r\n            valueChangerComponent = (\r\n                <SliderChanger\r\n                    sx={{}}\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n                ></SliderChanger>\r\n            )\r\n            break\r\n        case 'dropDown':\r\n            valueChangerComponent = (\r\n                <DropdownChanger\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n             \r\n                ></DropdownChanger>\r\n            )\r\n            break\r\n        case 'section':\r\n            valueChangerComponent = (\r\n                <Section\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></Section>\r\n            )\r\n            isLarge = true\r\n            break\r\n        case 'collapsible':\r\n            valueChangerComponent = (\r\n                <CollapsibleChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></CollapsibleChanger>\r\n            )\r\n            isLarge = true\r\n\r\n            break\r\n        case 'text':\r\n            valueChangerComponent = (\r\n                <TextChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></TextChanger>\r\n            )\r\n            break\r\n        case 'scope':\r\n            isLarge = true\r\n            valueChangerComponent = (\r\n                <ScopeChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></ScopeChanger>\r\n            )\r\n            break\r\n    }\r\n    return [valueChangerComponent, isLarge]\r\n}\r\n\r\nexport default ValueChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\YAML.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\Client.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\SliderChanger.js",["96"],[],"import React, { useState } from 'react'\r\nimport MuiInput from '@mui/material/Input'\r\n\r\nimport Slider from '@mui/material/Slider'\r\n\r\nfunction SliderChanger(props) {\r\n    const [value, setValue] = useState(Number(props.value))\r\n    const options = props.options\r\n    const sendChange = () => {\r\n        props.onValueChange([props.keyHistory, value])\r\n    }\r\n    const handleChange = (event, newValue) => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value))\r\n    }\r\n    const handleBlur = () => {\r\n        let tempValue = value\r\n        if (value < options.min) {\r\n            tempValue = options.min\r\n        } else if (value > options.max) {\r\n            tempValue = options.max\r\n        }\r\n        setValue(options.step * Math.round(tempValue / options.step)) //Make value to closest step\r\n        sendChange(value)\r\n    }\r\n\r\n    return (\r\n        // <Slider size=\"small\" sx={{width: '90%', mt: 1, color: 'crimson'}} valueLabelDisplay=\"on\" value={value} min={options.min} max={options.max} step={options.step} marks={options.marks} track={options.track} onChange={handleChange} onChangeCommitted={sendChange}></Slider>\r\n        <MuiInput\r\n            disabled={props.isDisabled}\r\n            value={value}\r\n            sx={{}}\r\n            inputProps={{\r\n                step: options.step,\r\n                min: options.min,\r\n                max: options.max,\r\n                type: 'number',\r\n                style: { fontSize: '1em', textAlign: 'center' },\r\n            }}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n        ></MuiInput>\r\n    )\r\n}\r\n\r\nexport default SliderChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\BooleanChanger.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\theme.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\DropdownChanger.js",["97"],[],"import React, { useEffect, useState } from 'react'\r\nimport Select from '@mui/material/Select'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nfunction DropdownChanger(props) {\r\n    const [value, setValue] = useState(props.value)\r\n    const handleChange = (event) => {\r\n        console.log(props.value)\r\n        setValue(event.target.value)\r\n        props.onValueChange([props.keyHistory, event.target.value])\r\n    }\r\n\r\n    let returnSelect\r\n    const style={ mb: 1, minWidth: 5, fontSize: 12 }\r\n    if (props.options.differentLabels) {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" sx={style} MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }}\r\n            value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value} style={{fontSize: 12}}>\r\n                        {option.label}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    } else {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }} sx={style} value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option} value={option} style={{fontSize: 12}}>\r\n                        {option}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    }\r\n    return returnSelect\r\n}\r\n\r\nexport default DropdownChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\Section.js",["98"],[],"import ValueChanger from './ValueChanger'\r\nimport Stack from '@mui/material/Stack'\r\nfunction Section(props) {\r\n    console.log(props.property)\r\n    console.log(props.value)\r\n    let valueChangerList = []\r\n    const sendChange = (newValue) => {\r\n        console.log(props.property)\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    let i = 1\r\n    for (const [property, value] of Object.entries(props.value)) {\r\n        valueChangerList.push(\r\n            <ValueChanger\r\n                sx={{}}\r\n                key={property}\r\n                property={property}\r\n                value={value}\r\n                keyHistory={props.keyHistory}\r\n                propertiesDB={props.propertiesDB}\r\n                scopesDB={props.scopesDB}\r\n                onValueChange={sendChange}\r\n            ></ValueChanger>\r\n        )\r\n    }\r\n    return (\r\n        <Stack spacing={0} sx={{}}>\r\n            {valueChangerList}\r\n        </Stack>\r\n    )\r\n}\r\nexport default Section\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\CollapsibleChanger.js",["99","100","101","102","103","104"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\TextChanger.js",["105","106","107"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\ScopeChanger.js",["108","109","110","111","112"],[],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport Box from '@mui/material/Box'\r\nimport { Accordion, AccordionSummary, AccordionDetails, Button } from '@mui/material'\r\n\r\nimport ImageList from '@mui/material/ImageList'\r\nimport ImageListItem from '@mui/material/ImageListItem'\r\nimport ValueChanger from './ValueChanger'\r\nimport ChannelChanger from './ChannelChanger.js'\r\n\r\nlet childKey = 0 //This is to ensure that the key of the channel changes each re render. So the channel will actually be remade.\r\n\r\n\r\nfunction ScopeChanger(props) {\r\n    const properties = props.value\r\n    const newKeyHistory = [...props.keyHistory, props.scopeIndex]\r\n    const [currentType, setCurrentType] = useState(properties['type'])\r\n    const scopeProperties = useRef({ ...props.value })\r\n    const setDefaults = useRef(false)\r\n    let channels = []\r\n\r\n    console.log(childKey)\r\n\r\n    const typeDB = props.scopesDB[currentType]\r\n    const saveChange = (newValue) => {\r\n        const keyHistory = newValue[0]\r\n        const keyHistoryLength = keyHistory.length\r\n        let firstIndex = keyHistoryLength - 1\r\n        while (keyHistory[firstIndex] !== 'Scopes') {\r\n            firstIndex--\r\n        }\r\n        firstIndex += 2 //Add 2 because firstIndex is currently at current 'Scope'. Go to the property\r\n        let tempObj = scopeProperties.current\r\n        for (let i = firstIndex; i < keyHistoryLength - 1; i++) {\r\n            tempObj = tempObj[keyHistory[i]]\r\n        }\r\n        tempObj[keyHistory[keyHistoryLength - 1]] = newValue[1]\r\n        console.log(scopeProperties.current)\r\n    }\r\n    const sendChanges = () => {\r\n        props.onValueChange([[...props.keyHistory, props.scopeIndex], scopeProperties.current])\r\n    }\r\n    const changeScopeType = (newType) => {\r\n        setDefaults.current = true\r\n        console.log(`${currentType} | ${newType[1]}`)//[1] since first part is keyHistory\r\n\r\n        setCurrentType(newType[1])\r\n        //saveChange(newType);\r\n    }\r\n\r\n    const getDefaultChannel = () => {\r\n        let returnChannel = {}\r\n        for (const [property, value] of Object.entries(typeDB['channelProperties'])) {\r\n            returnChannel[property] = value['defaultValue']\r\n        }\r\n        return returnChannel\r\n    }\r\n    const channelUpdate = (channel) => {\r\n        if (!scopeProperties.current['activeChannels'].includes(channel)) {\r\n            console.log('Channel not enabled currently')\r\n            scopeProperties.current['activeChannels'].push(channel)\r\n            scopeProperties.current['channelsConfigSettings'][channel] = getDefaultChannel()\r\n        } else {\r\n            delete scopeProperties.current['channelsConfigSettings'][channel]\r\n            scopeProperties.current['activeChannels'].splice(scopeProperties.current['activeChannels'].indexOf(channel), 1)\r\n        }\r\n        console.log(scopeProperties.current)\r\n\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'activeChannels'], activeChannels]);\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'channelsConfigSettings'], channelProperties]);\r\n    }\r\n\r\n    const nameUpdates = (newName) => {\r\n        saveChange(newName)\r\n    }\r\n\r\n    for (let channelIndex = 1; channelIndex <= typeDB['maxChannels']; channelIndex++) {\r\n        let isActive = scopeProperties.current['activeChannels'].includes(channelIndex)\r\n        channels.push(\r\n            <ImageListItem key={++childKey}>\r\n                <ChannelChanger\r\n                    value={isActive ? scopeProperties.current['channelsConfigSettings'][channelIndex] : false}\r\n                    setDefaults={setDefaults.current}\r\n                    channelNumber={channelIndex}\r\n                    isActive={isActive}\r\n                    keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]}\r\n                    propertiesDB={typeDB['channelProperties']}\r\n                    onValueChange={saveChange}\r\n                    channelUpdate={channelUpdate}\r\n                ></ChannelChanger>\r\n            </ImageListItem>\r\n        )\r\n        \r\n    }\r\n    console.log(scopeProperties.current)\r\n\r\n    childKey++;\r\n    return (\r\n        <Grid container columns={16} spacing={1} sx={{ px: 1 }} >\r\n            {/* ROW 1 */}\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'connectionString'}\r\n                    value={properties['connectionString']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'waveFormat'}\r\n                    isDisabled={properties['waveFormat'] ? false : true}\r\n                    value={properties['waveFormat'] ? properties['waveFormat'] : 'BYTE'}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerReference'}\r\n                    isDisabled={typeDB['triggerReference']['isDisabled']}\r\n                    value={typeDB['triggerReference']['isDisabled'] || setDefaults.current ? '' : properties[typeDB['triggerReference']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={4}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'name'}\r\n                    value={properties['name']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={nameUpdates}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'filePath'}\r\n                    value={properties['filePath']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'fileFormat'}\r\n                    value={properties['fileFormat']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 1 */}\r\n            {/* ROW 2 */}\r\n            <Grid md={2}>\r\n                <ValueChanger\r\n                    property={'type'}\r\n                    value={properties['type']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={changeScopeType}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerType'}\r\n                    value={properties['triggerType']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'memSize'}\r\n                    isDisabled={typeDB['memSize']['isDisabled']}\r\n                    value={typeDB['memSize']['isDisabled'] || setDefaults.current ? typeDB['memSize']['defaultValue'] : properties[typeDB['memSize']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'tdiv'}\r\n                    isDisabled={typeDB['tdiv']['isDisabled']}\r\n                    value={typeDB['tdiv']['isDisabled'] || setDefaults.current ? typeDB['tdiv']['defaultValue'] : properties[typeDB['tdiv']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'samplingRate'}\r\n                    isDisabled={typeDB['samplingRate']['isDisabled']}\r\n                    value={typeDB['samplingRate']['isDisabled'] || setDefaults.current ? typeDB['samplingRate']['defaultValue'] : properties[typeDB['samplingRate']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'timeOffset'}\r\n                    isDisabled={typeDB['timeOffset']['isDisabled']}\r\n                    value={typeDB['timeOffset']['isDisabled'] || setDefaults.current ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerLevel'}\r\n                    isDisabled={typeDB['triggerLevel']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerLevel']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerLevel']['defaultValue']\r\n                            : properties[typeDB['triggerLevel']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerDelay'}\r\n                    isDisabled={typeDB['triggerDelay']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerDelay']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerDelay']['defaultValue']\r\n                            : properties[typeDB['triggerDelay']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 2 */}\r\n\r\n            {/* ROW 3 */}\r\n\r\n            <Grid md={16}>\r\n                <ImageList\r\n                    sx={{\r\n                        gridAutoFlow: 'column',\r\n                        gridTemplateColumns: 'repeat(auto-fill,minmax(25%,1fr)) !important',\r\n                        gridAutoColumns: 'minmax(25%, 1fr)',\r\n                        overflowY: 'hidden',\r\n                    }}\r\n                >\r\n                    {channels}\r\n                </ImageList>\r\n            </Grid>\r\n            <Grid md={16} xs={16}>\r\n                <Button variant=\"contained\" onClick={sendChanges}>\r\n                    Save Scope\r\n                </Button>\r\n            </Grid>\r\n\r\n            {/* ROW 3 */}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ScopeChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\ChannelChanger.js",["113"],[],"import React, { useState, useEffect } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport ValueChanger from './ValueChanger'\r\nimport Button from '@mui/material/Button'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nfunction ChannelChanger(props) {\r\n    const [isDisabled, setIsDisabled] = useState(!props.isActive)\r\n    const [buttonText, setButtonText] = useState(isDisabled ? 'Inactive' : 'Active')\r\n    const [isConfirmed, setIsConfirmed] = useState(false)\r\n    const typeDB = props.propertiesDB\r\n    const properties = props.value\r\n    const theme = useTheme()\r\n    const sendChange = (newValue) => {\r\n        props.onValueChange(newValue)\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (isConfirmed) {\r\n            setIsDisabled(!isDisabled)\r\n            setButtonText(isDisabled ? 'Active' : 'Inactive')\r\n            setIsConfirmed(false)\r\n            props.channelUpdate(props.channelNumber)\r\n        } else {\r\n            setButtonText('Are you sure?')\r\n            setIsConfirmed(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} sx={{ borderLeft: 'solid 2px', borderRight: 'solid 2px', px: 1 }}>\r\n            <Grid xs={12} md={12}>\r\n                <h3 style={{ marginTop: 0, marginBottom: 0 }}>Channel {props.channelNumber}</h3>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'name'}\r\n                    isDisabled={isDisabled}\r\n                    value={!properties ? typeDB['name']['defaultValue'] : properties['name']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'coupling'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['coupling']['defaultValue'] : properties['coupling']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'bwLimit'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['bwLimit']['defaultValue'] : properties['bwLimit']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'probe'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['probe']['defaultValue'] : properties['probe']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'tdiv'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['tdiv']['defaultValue'] : properties['tdiv']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'timeOffset'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'vdiv'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['vdiv']['defaultValue'] : properties[typeDB['vdiv']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'voltageOffset'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['voltageOffset']['defaultValue'] : properties[typeDB['voltageOffset']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={12}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                        ':hover': { background: theme.palette.primary.dark },\r\n                        background: isConfirmed ? theme.status.warning : isDisabled ? theme.status.disable : theme.status.enable,\r\n                        width: '100%',\r\n                        height: 50,\r\n                    }}\r\n                    onClick={handleChange}\r\n                >\r\n                    <h3>{buttonText}</h3>\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ChannelChanger\r\n",{"ruleId":"114","severity":1,"message":"115","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":11},{"ruleId":"114","severity":1,"message":"118","line":13,"column":11,"nodeType":"116","messageId":"117","endLine":13,"endColumn":19},{"ruleId":"114","severity":1,"message":"119","line":2,"column":16,"nodeType":"116","messageId":"117","endLine":2,"endColumn":25},{"ruleId":"114","severity":1,"message":"120","line":11,"column":10,"nodeType":"116","messageId":"117","endLine":11,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":53,"column":5,"nodeType":"123","messageId":"124","endLine":144,"endColumn":6},{"ruleId":"114","severity":1,"message":"125","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":14},{"ruleId":"114","severity":1,"message":"119","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"126","line":12,"column":9,"nodeType":"116","messageId":"117","endLine":12,"endColumn":10},{"ruleId":"114","severity":1,"message":"127","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":12},{"ruleId":"114","severity":1,"message":"128","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":13},{"ruleId":"114","severity":1,"message":"129","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":14},{"ruleId":"114","severity":1,"message":"130","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":16},{"ruleId":"114","severity":1,"message":"131","line":7,"column":10,"nodeType":"116","messageId":"117","endLine":7,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":19,"column":23,"nodeType":"134","messageId":"135","endLine":19,"endColumn":25},{"ruleId":"114","severity":1,"message":"136","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"137","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":19},{"ruleId":"114","severity":1,"message":"138","line":5,"column":9,"nodeType":"116","messageId":"117","endLine":5,"endColumn":18},{"ruleId":"114","severity":1,"message":"119","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":3,"column":8,"nodeType":"116","messageId":"117","endLine":3,"endColumn":11},{"ruleId":"114","severity":1,"message":"139","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":19},{"ruleId":"114","severity":1,"message":"140","line":4,"column":21,"nodeType":"116","messageId":"117","endLine":4,"endColumn":37},{"ruleId":"114","severity":1,"message":"141","line":4,"column":39,"nodeType":"116","messageId":"117","endLine":4,"endColumn":55},{"ruleId":"114","severity":1,"message":"119","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'yamlFile' is assigned a value but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Slider' is defined but never used.","'i' is assigned a value but never used.","'Grid' is defined but never used.","'Stack' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'textAlign' is defined but never used.","'isWaiting' is assigned a value but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used."]