[{"C:\\Code\\ReactUI\\React\\reactui\\src\\index.js":"1","C:\\Code\\ReactUI\\React\\reactui\\src\\reportWebVitals.js":"2","C:\\Code\\ReactUI\\React\\reactui\\src\\App.js":"3","C:\\Code\\ReactUI\\React\\reactui\\src\\Controller.js":"4","C:\\Code\\ReactUI\\React\\reactui\\src\\ValueChanger.js":"5","C:\\Code\\ReactUI\\React\\reactui\\src\\YAML.js":"6","C:\\Code\\ReactUI\\React\\reactui\\src\\Client.js":"7","C:\\Code\\ReactUI\\React\\reactui\\src\\SliderChanger.js":"8","C:\\Code\\ReactUI\\React\\reactui\\src\\BooleanChanger.js":"9","C:\\Code\\ReactUI\\React\\reactui\\src\\theme.js":"10","C:\\Code\\ReactUI\\React\\reactui\\src\\DropdownChanger.js":"11","C:\\Code\\ReactUI\\React\\reactui\\src\\Section.js":"12","C:\\Code\\ReactUI\\React\\reactui\\src\\CollapsibleChanger.js":"13","C:\\Code\\ReactUI\\React\\reactui\\src\\TextChanger.js":"14","C:\\Code\\ReactUI\\React\\reactui\\src\\ScopeChanger.js":"15","C:\\Code\\ReactUI\\React\\reactui\\src\\ChannelChanger.js":"16","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\index.js":"17","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\theme.js":"18","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\App.js":"19","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Controller.js":"20","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Client.js":"21","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ValueChanger.js":"22","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\SliderChanger.js":"23","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Section.js":"24","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\BooleanChanger.js":"25","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\DropdownChanger.js":"26","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ScopeChanger.js":"27","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\CollapsibleChanger.js":"28","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\TextChanger.js":"29","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ChannelChanger.js":"30","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ListChanger.js":"31","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\index.js":"32","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\theme.js":"33","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\App.js":"34","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Controller.js":"35","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Client.js":"36","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ValueChanger.js":"37","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\DropdownChanger.js":"38","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\BooleanChanger.js":"39","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\SliderChanger.js":"40","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ListChanger.js":"41","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ScopeChanger.js":"42","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Section.js":"43","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\CollapsibleChanger.js":"44","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\TextChanger.js":"45","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ChannelChanger.js":"46"},{"size":526,"mtime":1663009797584,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1663084836497,"results":"49","hashOfConfig":"48"},{"size":1603,"mtime":1664810362439,"results":"50","hashOfConfig":"48"},{"size":4104,"mtime":1664562814058,"results":"51","hashOfConfig":"48"},{"size":5346,"mtime":1664567241496,"results":"52","hashOfConfig":"48"},{"size":1023,"mtime":1663086038054,"results":"53","hashOfConfig":"48"},{"size":2173,"mtime":1664816484893,"results":"54","hashOfConfig":"48"},{"size":1639,"mtime":1664552526358,"results":"55","hashOfConfig":"48"},{"size":562,"mtime":1664382176156,"results":"56","hashOfConfig":"48"},{"size":335,"mtime":1663009797615,"results":"57","hashOfConfig":"48"},{"size":1579,"mtime":1664566271087,"results":"58","hashOfConfig":"48"},{"size":994,"mtime":1664382174436,"results":"59","hashOfConfig":"48"},{"size":6140,"mtime":1664814941540,"results":"60","hashOfConfig":"48"},{"size":792,"mtime":1664815373411,"results":"61","hashOfConfig":"48"},{"size":11891,"mtime":1664564285643,"results":"62","hashOfConfig":"48"},{"size":5828,"mtime":1664398994159,"results":"63","hashOfConfig":"48"},{"size":543,"mtime":1664837221190,"results":"64","hashOfConfig":"65"},{"size":354,"mtime":1664837221196,"results":"66","hashOfConfig":"65"},{"size":2891,"mtime":1667867955250,"results":"67","hashOfConfig":"65"},{"size":6708,"mtime":1667868957654,"results":"68","hashOfConfig":"65"},{"size":2600,"mtime":1666636835614,"results":"69","hashOfConfig":"65"},{"size":6524,"mtime":1668458482961,"results":"70","hashOfConfig":"65"},{"size":2863,"mtime":1668023551294,"results":"71","hashOfConfig":"65"},{"size":2049,"mtime":1668452921262,"results":"72","hashOfConfig":"65"},{"size":562,"mtime":1664837221129,"results":"73","hashOfConfig":"65"},{"size":1550,"mtime":1668456644034,"results":"74","hashOfConfig":"65"},{"size":19868,"mtime":1668466438420,"results":"75","hashOfConfig":"65"},{"size":6250,"mtime":1668452909477,"results":"76","hashOfConfig":"65"},{"size":628,"mtime":1668116862924,"results":"77","hashOfConfig":"65"},{"size":10173,"mtime":1668469326174,"results":"78","hashOfConfig":"65"},{"size":4947,"mtime":1665593291481,"results":"79","hashOfConfig":"65"},{"size":543,"mtime":1664837221190,"results":"80","hashOfConfig":"81"},{"size":354,"mtime":1664837221196,"results":"82","hashOfConfig":"81"},{"size":2891,"mtime":1667867955250,"results":"83","hashOfConfig":"81"},{"size":6708,"mtime":1667868957654,"results":"84","hashOfConfig":"81"},{"size":2715,"mtime":1669051365237,"results":"85","hashOfConfig":"81"},{"size":6524,"mtime":1668458482961,"results":"86","hashOfConfig":"81"},{"size":1550,"mtime":1668456644034,"results":"87","hashOfConfig":"81"},{"size":562,"mtime":1664837221129,"results":"88","hashOfConfig":"81"},{"size":2863,"mtime":1668023551294,"results":"89","hashOfConfig":"81"},{"size":4947,"mtime":1665593291481,"results":"90","hashOfConfig":"81"},{"size":19868,"mtime":1668466438420,"results":"91","hashOfConfig":"81"},{"size":2049,"mtime":1668452921262,"results":"92","hashOfConfig":"81"},{"size":6250,"mtime":1668452909477,"results":"93","hashOfConfig":"81"},{"size":628,"mtime":1668116862924,"results":"94","hashOfConfig":"81"},{"size":10280,"mtime":1668540780786,"results":"95","hashOfConfig":"81"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"6i77mg",{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"99"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"110"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},"1m4n49d",{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"156"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"156"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"156"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"156"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"156"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"156"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"156"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"156"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"156"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cgbi84",{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Code\\ReactUI\\React\\reactui\\src\\index.js",[],[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\reportWebVitals.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\App.js",["255"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\Controller.js",["256"],[],"import Button from '@mui/material/Button'\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport Client from './Client.js'\r\nimport React, { useState } from 'react'\r\n\r\nimport { loadYAML } from './YAML.js'\r\nlet mainConfig\r\n//Value:Label Mappings,\r\n//collapsbible, make scopes to names instead of numbers, change to array for order,\r\nfunction Controller(props) {\r\n    const [clients, setClients] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const yamlFile = loadYAML('test.yml')\r\n\r\n    const homeButton = (<Button href={'/home'}>Home</Button>)\r\n    console.log('Controller rerender')\r\n\r\n    const changeValue = ([clientNumber, [keyHistory, newValue]]) => {\r\n        //Array destructuring. Will take the array of property and value and make it into two variables.\r\n        let client = mainConfig[clientNumber]\r\n        //console.log(client);\r\n        console.log(keyHistory)\r\n        console.log(newValue)\r\n        for (let i = 0; i < keyHistory.length - 1; i++) {\r\n            //Go through keyhistory (except last one). Now client is pointing to the last object which is the {proprety: value}.\r\n            client = client[keyHistory[i]]\r\n        }\r\n        client[keyHistory[keyHistory.length - 1]] = newValue\r\n        //     console.log(client);\r\n        console.log(mainConfig)\r\n    }\r\n    const generateClients = (json, propertiesDB, scopesDB) => {\r\n        let tempArray = []\r\n        for (const [clientNumber, clientData] of Object.entries(json)) {\r\n            tempArray.push(\r\n                <Client\r\n                    sx={{}}\r\n                    key={clientNumber}\r\n                    clientNumber={clientNumber}\r\n                    properties={clientData}\r\n                    propertiesDB={propertiesDB}\r\n                    scopesDB={scopesDB}\r\n                    onValueChange={changeValue}\r\n                ></Client>\r\n            )\r\n        }\r\n        return tempArray\r\n    }\r\n\r\n    const getData = async () => {\r\n        try {\r\n            const req = await fetch(`/getData/`, { method: 'GET' })\r\n            const json = await req.json()\r\n            return json\r\n        } catch (err) {\r\n            console.log('Error fetching data')\r\n        }\r\n    }\r\n    const initController = async () => {\r\n        const data = await getData()\r\n        const propertiesDB = data['propertiesDB']\r\n        const scopesDB = data['scopesDB']\r\n        console.log(data)\r\n        mainConfig = data['clients']\r\n        let tempClients = generateClients(data['clients'], propertiesDB, scopesDB) //Properties DB seems to be passes by reference\r\n        setClients(tempClients)\r\n    }\r\n\r\n    const saveChanges = async () => {\r\n        console.log('Saving: ')\r\n        try {\r\n            await fetch(`/getData/`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(mainConfig),\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    if (clients.length > 0) {\r\n        return (\r\n            <div style={{ textAlign: 'center', marginBottom: 20}}>\r\n                {homeButton}\r\n                <h1>Controls</h1>\r\n                {clients}\r\n                {/* <Client properties={properties} onValueChange={changeValue}></Client> */}\r\n                {/* <ValueChanger onValueChange={sendChange} name=\"temperature\" value={10}></ValueChanger> */}\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => saveChanges()} sx={{marginTop: 1, width: 1}}>\r\n                    Save Changes\r\n                </Button>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div style={{marginTop: '50px'}}>\r\n                {homeButton}\r\n                  <LoadingButton\r\n          onClick={() => {\r\n            setIsLoading(true)\r\n            initController()\r\n          }}\r\n          loading={isLoading}\r\n          loadingIndicator=\"Loading…\"\r\n          variant=\"contained\"\r\n        >\r\n          Fetch data\r\n        </LoadingButton>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controller\r\n",[],"C:\\Code\\ReactUI\\React\\reactui\\src\\ValueChanger.js",["257","258","259"],[],"import SliderChanger from './SliderChanger.js'\r\nimport React, {useEffect} from 'react'\r\nimport { Box, Paper } from '@mui/material/'\r\nimport BooleanChanger from './BooleanChanger.js'\r\nimport DropdownChanger from './DropdownChanger.js'\r\nimport Section from './Section.js'\r\nimport CollapsibleChanger from './CollapsibleChanger.js'\r\nimport TextChanger from './TextChanger.js'\r\nimport ScopeChanger from './ScopeChanger.js'\r\n\r\nimport { Component } from 'react'\r\n\r\nfunction ValueChanger(props) {\r\n    //Add steps and min and max ranges.\r\n    const [valueChanger, isLarge] = createValueChanger(props)\r\n    const fontSize = 13//Math.min(160 / props.propertiesDB[props.property].name.length, 13) \r\n    if(isLarge){\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={{ px: 1,textAlign: 'center', border: props.hasBorder ? 'solid 0px' : 'none' }}>\r\n                    <h2 style={{ fontSize: 20 }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={{ px: 1, minHeight: 70, maxHeight: 70,height: 70,textAlign: 'center', border: props.hasBorder ? 'solid 0px' : 'none' }}>\r\n                    <h2 style={{ fontSize: fontSize }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nfunction createValueChanger(props) {\r\n    const sendChange = (newValue) => {\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    const getOptions = (property) => {\r\n        return props.propertiesDB[property]['options'] //Only place to change this\r\n    }\r\n    let valueChangerComponent\r\n    let isLarge = false\r\n    const componentType = props.propertiesDB[props.property]['type']\r\n    const newKeyHistory = [...props.keyHistory, props.property]\r\n\r\n    switch (\r\n        componentType //THIS WILL BE THE LOOKUP TABLE\r\n    ) {\r\n        case 'boolean':\r\n            valueChangerComponent = (\r\n                <BooleanChanger\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                ></BooleanChanger>\r\n            )\r\n            break\r\n        case 'slider':\r\n            valueChangerComponent = (\r\n                <SliderChanger\r\n                    sx={{}}\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n                ></SliderChanger>\r\n            )\r\n            break\r\n        case 'dropDown':\r\n            valueChangerComponent = (\r\n                <DropdownChanger\r\n                    isDisabled={props.isDisabled}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n             \r\n                ></DropdownChanger>\r\n            )\r\n            break\r\n        case 'section':\r\n            valueChangerComponent = (\r\n                <Section\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></Section>\r\n            )\r\n            isLarge = true\r\n            break\r\n        case 'collapsible':\r\n            valueChangerComponent = (\r\n                <CollapsibleChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></CollapsibleChanger>\r\n            )\r\n            isLarge = true\r\n\r\n            break\r\n        case 'text':\r\n            valueChangerComponent = (\r\n                <TextChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></TextChanger>\r\n            )\r\n            break\r\n        case 'scope':\r\n            isLarge = true\r\n            valueChangerComponent = (\r\n                <ScopeChanger\r\n                    isDisabled={props.isDisabled}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></ScopeChanger>\r\n            )\r\n            break\r\n    }\r\n    return [valueChangerComponent, isLarge]\r\n}\r\n\r\nexport default ValueChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\YAML.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\Client.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\SliderChanger.js",["260"],[],"import React, { useState } from 'react'\r\nimport MuiInput from '@mui/material/Input'\r\n\r\nimport Slider from '@mui/material/Slider'\r\n\r\nfunction SliderChanger(props) {\r\n    const [value, setValue] = useState(Number(props.value))\r\n    const options = props.options\r\n    const sendChange = () => {\r\n        props.onValueChange([props.keyHistory, value])\r\n    }\r\n    const handleChange = (event, newValue) => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value))\r\n    }\r\n    const handleBlur = () => {\r\n        let tempValue = value\r\n        if (value < options.min) {\r\n            tempValue = options.min\r\n        } else if (value > options.max) {\r\n            tempValue = options.max\r\n        }\r\n        setValue(options.step * Math.round(tempValue / options.step)) //Make value to closest step\r\n        sendChange(value)\r\n    }\r\n\r\n    return (\r\n        // <Slider size=\"small\" sx={{width: '90%', mt: 1, color: 'crimson'}} valueLabelDisplay=\"on\" value={value} min={options.min} max={options.max} step={options.step} marks={options.marks} track={options.track} onChange={handleChange} onChangeCommitted={sendChange}></Slider>\r\n        <MuiInput\r\n            disabled={props.isDisabled}\r\n            value={value}\r\n            sx={{}}\r\n            inputProps={{\r\n                step: options.step,\r\n                min: options.min,\r\n                max: options.max,\r\n                type: 'number',\r\n                style: { fontSize: '1em', textAlign: 'center' },\r\n            }}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n        ></MuiInput>\r\n    )\r\n}\r\n\r\nexport default SliderChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\BooleanChanger.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\theme.js",[],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\DropdownChanger.js",["261"],[],"import React, { useEffect, useState } from 'react'\r\nimport Select from '@mui/material/Select'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nfunction DropdownChanger(props) {\r\n    const [value, setValue] = useState(props.value)\r\n    const handleChange = (event) => {\r\n        console.log(props.value)\r\n        setValue(event.target.value)\r\n        props.onValueChange([props.keyHistory, event.target.value])\r\n    }\r\n\r\n    let returnSelect\r\n    const style={ mb: 1, minWidth: 5, fontSize: 12 }\r\n    if (props.options.differentLabels) {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" sx={style} MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }}\r\n            value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value} style={{fontSize: 12}}>\r\n                        {option.label}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    } else {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }} sx={style} value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option} value={option} style={{fontSize: 12}}>\r\n                        {option}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    }\r\n    return returnSelect\r\n}\r\n\r\nexport default DropdownChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\Section.js",["262"],[],"import ValueChanger from './ValueChanger'\r\nimport Stack from '@mui/material/Stack'\r\nfunction Section(props) {\r\n    console.log(props.property)\r\n    console.log(props.value)\r\n    let valueChangerList = []\r\n    const sendChange = (newValue) => {\r\n        console.log(props.property)\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    let i = 1\r\n    for (const [property, value] of Object.entries(props.value)) {\r\n        valueChangerList.push(\r\n            <ValueChanger\r\n                sx={{}}\r\n                key={property}\r\n                property={property}\r\n                value={value}\r\n                keyHistory={props.keyHistory}\r\n                propertiesDB={props.propertiesDB}\r\n                scopesDB={props.scopesDB}\r\n                onValueChange={sendChange}\r\n            ></ValueChanger>\r\n        )\r\n    }\r\n    return (\r\n        <Stack spacing={0} sx={{}}>\r\n            {valueChangerList}\r\n        </Stack>\r\n    )\r\n}\r\nexport default Section\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\CollapsibleChanger.js",["263","264","265","266","267","268"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\TextChanger.js",["269","270","271"],[],"C:\\Code\\ReactUI\\React\\reactui\\src\\ScopeChanger.js",["272","273","274","275","276"],[],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport Box from '@mui/material/Box'\r\nimport { Accordion, AccordionSummary, AccordionDetails, Button } from '@mui/material'\r\n\r\nimport ImageList from '@mui/material/ImageList'\r\nimport ImageListItem from '@mui/material/ImageListItem'\r\nimport ValueChanger from './ValueChanger'\r\nimport ChannelChanger from './ChannelChanger.js'\r\n\r\nlet childKey = 0 //This is to ensure that the key of the channel changes each re render. So the channel will actually be remade.\r\n\r\n\r\nfunction ScopeChanger(props) {\r\n    const properties = props.value\r\n    const newKeyHistory = [...props.keyHistory, props.scopeIndex]\r\n    const [currentType, setCurrentType] = useState(properties['type'])\r\n    const scopeProperties = useRef({ ...props.value })\r\n    const setDefaults = useRef(false)\r\n    let channels = []\r\n\r\n    console.log(childKey)\r\n\r\n    const typeDB = props.scopesDB[currentType]\r\n    const saveChange = (newValue) => {\r\n        const keyHistory = newValue[0]\r\n        const keyHistoryLength = keyHistory.length\r\n        let firstIndex = keyHistoryLength - 1\r\n        while (keyHistory[firstIndex] !== 'Scopes') {\r\n            firstIndex--\r\n        }\r\n        firstIndex += 2 //Add 2 because firstIndex is currently at current 'Scope'. Go to the property\r\n        let tempObj = scopeProperties.current\r\n        for (let i = firstIndex; i < keyHistoryLength - 1; i++) {\r\n            tempObj = tempObj[keyHistory[i]]\r\n        }\r\n        tempObj[keyHistory[keyHistoryLength - 1]] = newValue[1]\r\n        console.log(scopeProperties.current)\r\n    }\r\n    const sendChanges = () => {\r\n        props.onValueChange([[...props.keyHistory, props.scopeIndex], scopeProperties.current])\r\n    }\r\n    const changeScopeType = (newType) => {\r\n        setDefaults.current = true\r\n        console.log(`${currentType} | ${newType[1]}`)//[1] since first part is keyHistory\r\n\r\n        setCurrentType(newType[1])\r\n        //saveChange(newType);\r\n    }\r\n\r\n    const getDefaultChannel = () => {\r\n        let returnChannel = {}\r\n        for (const [property, value] of Object.entries(typeDB['channelProperties'])) {\r\n            returnChannel[property] = value['defaultValue']\r\n        }\r\n        return returnChannel\r\n    }\r\n    const channelUpdate = (channel) => {\r\n        if (!scopeProperties.current['activeChannels'].includes(channel)) {\r\n            console.log('Channel not enabled currently')\r\n            scopeProperties.current['activeChannels'].push(channel)\r\n            scopeProperties.current['channelsConfigSettings'][channel] = getDefaultChannel()\r\n        } else {\r\n            delete scopeProperties.current['channelsConfigSettings'][channel]\r\n            scopeProperties.current['activeChannels'].splice(scopeProperties.current['activeChannels'].indexOf(channel), 1)\r\n        }\r\n        console.log(scopeProperties.current)\r\n\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'activeChannels'], activeChannels]);\r\n        //saveChange([[...props.keyHistory, scopeIndex, 'channelsConfigSettings'], channelProperties]);\r\n    }\r\n\r\n    const nameUpdates = (newName) => {\r\n        saveChange(newName)\r\n    }\r\n\r\n    for (let channelIndex = 1; channelIndex <= typeDB['maxChannels']; channelIndex++) {\r\n        let isActive = scopeProperties.current['activeChannels'].includes(channelIndex)\r\n        channels.push(\r\n            <ImageListItem key={++childKey}>\r\n                <ChannelChanger\r\n                    value={isActive ? scopeProperties.current['channelsConfigSettings'][channelIndex] : false}\r\n                    setDefaults={setDefaults.current}\r\n                    channelNumber={channelIndex}\r\n                    isActive={isActive}\r\n                    keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]}\r\n                    propertiesDB={typeDB['channelProperties']}\r\n                    onValueChange={saveChange}\r\n                    channelUpdate={channelUpdate}\r\n                ></ChannelChanger>\r\n            </ImageListItem>\r\n        )\r\n        \r\n    }\r\n    console.log(scopeProperties.current)\r\n\r\n    childKey++;\r\n    return (\r\n        <Grid container columns={16} spacing={1} sx={{ px: 1 }} >\r\n            {/* ROW 1 */}\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'connectionString'}\r\n                    value={properties['connectionString']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'waveFormat'}\r\n                    isDisabled={properties['waveFormat'] ? false : true}\r\n                    value={properties['waveFormat'] ? properties['waveFormat'] : 'BYTE'}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerReference'}\r\n                    isDisabled={typeDB['triggerReference']['isDisabled']}\r\n                    value={typeDB['triggerReference']['isDisabled'] || setDefaults.current ? '' : properties[typeDB['triggerReference']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={4}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'name'}\r\n                    value={properties['name']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={nameUpdates}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'filePath'}\r\n                    value={properties['filePath']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'fileFormat'}\r\n                    value={properties['fileFormat']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 1 */}\r\n            {/* ROW 2 */}\r\n            <Grid md={2}>\r\n                <ValueChanger\r\n                    property={'type'}\r\n                    value={properties['type']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={changeScopeType}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerType'}\r\n                    value={properties['triggerType']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'memSize'}\r\n                    isDisabled={typeDB['memSize']['isDisabled']}\r\n                    value={typeDB['memSize']['isDisabled'] || setDefaults.current ? typeDB['memSize']['defaultValue'] : properties[typeDB['memSize']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'tdiv'}\r\n                    isDisabled={typeDB['tdiv']['isDisabled']}\r\n                    value={typeDB['tdiv']['isDisabled'] || setDefaults.current ? typeDB['tdiv']['defaultValue'] : properties[typeDB['tdiv']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'samplingRate'}\r\n                    isDisabled={typeDB['samplingRate']['isDisabled']}\r\n                    value={typeDB['samplingRate']['isDisabled'] || setDefaults.current ? typeDB['samplingRate']['defaultValue'] : properties[typeDB['samplingRate']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'timeOffset'}\r\n                    isDisabled={typeDB['timeOffset']['isDisabled']}\r\n                    value={typeDB['timeOffset']['isDisabled'] || setDefaults.current ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerLevel'}\r\n                    isDisabled={typeDB['triggerLevel']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerLevel']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerLevel']['defaultValue']\r\n                            : properties[typeDB['triggerLevel']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerDelay'}\r\n                    isDisabled={typeDB['triggerDelay']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerDelay']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerDelay']['defaultValue']\r\n                            : properties[typeDB['triggerDelay']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 2 */}\r\n\r\n            {/* ROW 3 */}\r\n\r\n            <Grid md={16}>\r\n                <ImageList\r\n                    sx={{\r\n                        gridAutoFlow: 'column',\r\n                        gridTemplateColumns: 'repeat(auto-fill,minmax(25%,1fr)) !important',\r\n                        gridAutoColumns: 'minmax(25%, 1fr)',\r\n                        overflowY: 'hidden',\r\n                    }}\r\n                >\r\n                    {channels}\r\n                </ImageList>\r\n            </Grid>\r\n            <Grid md={16} xs={16}>\r\n                <Button variant=\"contained\" onClick={sendChanges}>\r\n                    Save Scope\r\n                </Button>\r\n            </Grid>\r\n\r\n            {/* ROW 3 */}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ScopeChanger\r\n","C:\\Code\\ReactUI\\React\\reactui\\src\\ChannelChanger.js",["277"],[],"import React, { useState, useEffect } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport ValueChanger from './ValueChanger'\r\nimport Button from '@mui/material/Button'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nfunction ChannelChanger(props) {\r\n    const [isDisabled, setIsDisabled] = useState(!props.isActive)\r\n    const [buttonText, setButtonText] = useState(isDisabled ? 'Inactive' : 'Active')\r\n    const [isConfirmed, setIsConfirmed] = useState(false)\r\n    const typeDB = props.propertiesDB\r\n    const properties = props.value\r\n    const theme = useTheme()\r\n    const sendChange = (newValue) => {\r\n        props.onValueChange(newValue)\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (isConfirmed) {\r\n            setIsDisabled(!isDisabled)\r\n            setButtonText(isDisabled ? 'Active' : 'Inactive')\r\n            setIsConfirmed(false)\r\n            props.channelUpdate(props.channelNumber)\r\n        } else {\r\n            setButtonText('Are you sure?')\r\n            setIsConfirmed(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={1} sx={{ borderLeft: 'solid 2px', borderRight: 'solid 2px', px: 1 }}>\r\n            <Grid xs={12} md={12}>\r\n                <h3 style={{ marginTop: 0, marginBottom: 0 }}>Channel {props.channelNumber}</h3>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'name'}\r\n                    isDisabled={isDisabled}\r\n                    value={!properties ? typeDB['name']['defaultValue'] : properties['name']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'coupling'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['coupling']['defaultValue'] : properties['coupling']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'bwLimit'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['bwLimit']['defaultValue'] : properties['bwLimit']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'probe'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['probe']['defaultValue'] : properties['probe']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'tdiv'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['tdiv']['defaultValue'] : properties['tdiv']}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'timeOffset'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'vdiv'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['vdiv']['defaultValue'] : properties[typeDB['vdiv']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={6}>\r\n                <ValueChanger\r\n                    property={'voltageOffset'}\r\n                    isDisabled={isDisabled}\r\n                    value={props.setDefaults || !properties ? typeDB['voltageOffset']['defaultValue'] : properties[typeDB['voltageOffset']['name']]}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid xs={12} md={12}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                        ':hover': { background: theme.palette.primary.dark },\r\n                        background: isConfirmed ? theme.status.warning : isDisabled ? theme.status.disable : theme.status.enable,\r\n                        width: '100%',\r\n                        height: 50,\r\n                    }}\r\n                    onClick={handleChange}\r\n                >\r\n                    <h3>{buttonText}</h3>\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ChannelChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\index.js",[],[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\theme.js",[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\App.js",["278","279"],[],"import * as React from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport Controller from './Controller.js';\r\nimport { ThemeProvider, createTheme, makeStyles } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\n\r\n\r\n\r\n\r\n\r\nexport default function App() {\r\n    const [mode, setMode] = React.useState('dark')\r\n\r\n    const theme =\r\n        createTheme({\r\n          components:{\r\n            MuiCssBaseline: {\r\n              styleOverrides: \r\n               `\r\n               /* ===== Scrollbar CSS ===== */\r\n               /* Firefox */\r\n               * {\r\n                 scrollbar-width: auto;\r\n                 scrollbar-color: #f21fa1 #2e2e2e;\r\n               }\r\n             \r\n               /* Chrome, Edge, and Safari */\r\n               *::-webkit-scrollbar {\r\n                 width: 8px;\r\n                 height: 10px;\r\n               }\r\n             \r\n               *::-webkit-scrollbar-track {\r\n                 background: #2e2e2e;\r\n                 border-radius: 13px;\r\n                 border: none\r\n               }\r\n             \r\n               *::-webkit-scrollbar-thumb {\r\n                 background-color: #f21fa1;\r\n                 border-radius: 13px;\r\n                 border: none;\r\n               },\r\n               h2{\r\n                fontSize: 30\r\n               }\r\n               `\r\n              \r\n            }\r\n          },\r\n          palette: {\r\n            mode,\r\n            primary: {\r\n              main: '#f21fa1',\r\n              contrastText: 'white'\r\n            },\r\n            secondary: {\r\n              main: '#c9bfbb'\r\n            },\r\n            error: {\r\n              main: '#FF0000'\r\n            },\r\n            sucess: {\r\n              main: '00FF00'\r\n            }\r\n          },\r\n          status:{\r\n            enable: '#00c925',\r\n            disable: '#c90000',\r\n            warning: '#d17000',\r\n \r\n          },\r\n          typography:{\r\n            h2:{\r\n              fontSize: 30\r\n            },\r\n            fontSize: 12,\r\n            fontFamily: [\r\n              '-apple-system',\r\n              'BlinkMacSystemFont',\r\n              '\"Segoe UI\"',\r\n              'Roboto',\r\n              '\"Helvetica Neue\"',\r\n              'Arial',\r\n              'sans-serif',\r\n              '\"Apple Color Emoji\"',\r\n              '\"Segoe UI Emoji\"',\r\n              '\"Segoe UI Symbol\"',\r\n            ].join(','),\r\n          }\r\n        })\r\n\r\n    fetch('/profileInfo').then(res => {\r\n      res.json().then(isDarkMode => {\r\n        setMode(isDarkMode.isDarkMode ? 'dark' : 'light')\r\n      })\r\n    })\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline>\r\n          <Container maxWidth=\"xl\" >\r\n              <Controller name=\"uv\"></Controller>\r\n          </Container>\r\n        </CssBaseline>\r\n  \r\n      </ThemeProvider>\r\n    \r\n    );\r\n\r\n\r\n \r\n\r\n}\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Controller.js",["280","281","282","283","284","285","286"],[],"import Button from '@mui/material/Button'\r\nimport { CircularProgress, LinearProgress, TextField } from '@mui/material';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\n\r\nimport Client from './Client.js'\r\nimport ValueChanger from './ValueChanger.js'\r\nimport React, { useState } from 'react'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Container } from '@mui/material';\r\nimport { margin } from '@mui/system';\r\n\r\n\r\nlet clientsConfig, adminPropertiesConfig\r\n//Value:Label Mappings,\r\n//collapsbible, make scopes to names instead of numbers, change to array for order,\r\nfunction Controller(props) {\r\n\r\n    const theme = useTheme()\r\n    const [clients, setClients] = useState([]);\r\n    const [adminProperties, setAdminProperties] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [saveButton, setSaveButton] = useState({text: 'Save Changes', color: 'primary'})\r\n    const [commitMessage, setCommitMessage] = useState(\"\")\r\n    const styles = {\r\n        commitComment :{ \r\n            height: 70, \r\n            width: '100%', \r\n            marginTop: 1\r\n        },\r\n        saveButton: {\r\n            marginTop: 0, \r\n            width: 1\r\n\r\n        }\r\n    }\r\n    //MAKE SURE NO DOBULE CLIKING\r\n    const homeButton = (<Button href={'/home'}>Home</Button>)\r\n    console.log('Controller rerender')\r\n    useState(async () => {\r\n        await initController()\r\n    },[])\r\n\r\n    const changeValue = ([clientNumber, [keyHistory, newValue]]) => {\r\n        //Array destructuring. Will take the array of property and value and make it into two variables.\r\n        if(clientNumber === -1){\r\n            console.log(\"admin property\")\r\n            return \r\n        }\r\n        let client = clientsConfig[clientNumber]\r\n        //console.log(client);\r\n        console.log(keyHistory)\r\n        console.log(newValue)\r\n        for (let i = 0; i < keyHistory.length - 1; i++) {\r\n            //Go through keyhistory (except last one). Now client is pointing to the last object which is the {proprety: value}.\r\n            client = client[keyHistory[i]]\r\n        }\r\n        client[keyHistory[keyHistory.length - 1]] = newValue\r\n        //     console.log(client);\r\n        console.log(clientsConfig)\r\n    }\r\n    const generateClients = (json, propertiesDB, scopesDB, userLevel) => {\r\n        let tempArray = []\r\n        for (const [clientNumber, clientData] of Object.entries(json)) {\r\n            tempArray.push(\r\n                <Client\r\n                    sx={{}}\r\n                    key={clientNumber}\r\n                    userLevel={userLevel}\r\n                    clientNumber={clientNumber}\r\n                    clientName={clientData.name}\r\n                    properties={clientData}\r\n                    propertiesDB={propertiesDB}\r\n                    scopesDB={scopesDB}\r\n                    onValueChange={changeValue}\r\n                ></Client>\r\n            )\r\n        }\r\n        return tempArray\r\n    }\r\n\r\n    const generateAdminProperties = (properties, userLevel, propertiesDB) => {\r\n        let tempAdminProperties = []\r\n        for (const [property, value] of Object.entries(properties)){\r\n            tempAdminProperties.push(\r\n                <ValueChanger\r\n                property={property}\r\n                keyHistory={[-1, []]}\r\n                value={value}\r\n                userLevel={userLevel}\r\n                propertiesDB={propertiesDB}\r\n                onValueChange={changeValue}\r\n                >\r\n\r\n                </ValueChanger>\r\n            )\r\n        }\r\n        return tempAdminProperties\r\n    } \r\n    async function getData() {\r\n      \r\n        try {\r\n            const req = await fetch(`/getData/`, { method: 'GET' })\r\n            const json = await req.json()\r\n            return json\r\n        } catch (err) {\r\n            console.log('Error fetching data')\r\n        }\r\n    }\r\n    async function initController() {\r\n        const data = await getData()\r\n        const propertiesDB = data['propertiesDB']\r\n        const scopesDB = data['scopesDB']\r\n        const userLevel = data['permissionLevel']\r\n        const adminProps = data['adminProperties']\r\n        if(adminProps){\r\n            setAdminProperties(generateAdminProperties(adminProps, userLevel, propertiesDB))\r\n        }\r\n        \r\n        clientsConfig = data['clients']\r\n\r\n        let tempClients = generateClients(data['clients'], propertiesDB, scopesDB, userLevel) //Properties DB seems to be passes by reference\r\n        setClients(tempClients)\r\n    }\r\n\r\n    const saveChanges = async () => {\r\n        console.log('Saving: ')\r\n        setSaveButton({text:'Saving Changes...', color: 'secondary'})\r\n        \r\n            const resp = await fetch(`/getData/`, {//Send new config to server\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({config: clientsConfig, commitMessage: commitMessage})\r\n                ,\r\n            })\r\n            console.log(resp)\r\n            if(resp.ok){//IF sucessfully pushed to github\r\n                setSaveButton({text: 'Changes Saved!', color: 'sucess'})\r\n                setTimeout(()=>{\r\n                    setSaveButton({text: 'Save Changes', color: 'primary'})\r\n                }, 5000)\r\n            }\r\n            else{\r\n                console.log(resp)\r\n                setSaveButton({text: resp.status === 513 ? 'Email not provided' : 'Not Authorized', color:'error'})\r\n            }\r\n        \r\n    }\r\n\r\n    if (clients.length > 0) {\r\n        return (\r\n            <div style={{ textAlign: 'center', marginBottom: 20}}>\r\n                {homeButton}\r\n                <h1>Controls</h1>\r\n                {adminProperties}\r\n                {clients}\r\n                {/* <Client properties={properties} onValueChange={changeValue}></Client> */}\r\n                {/* <ValueChanger onValueChange={sendChange} name=\"temperature\" value={10}></ValueChanger> */}\r\n                <TextField inputProps={{ style: { textAlign: 'center', fontSize: '1em' }}} sx={styles.commitComment} placeholder='Commit Message' onChange={e => setCommitMessage(e.target.value)}value={commitMessage}></TextField>\r\n                <Button variant=\"contained\" color={saveButton.color} onClick={() => saveChanges()} sx={styles.saveButton}>\r\n                    {saveButton.text}\r\n                </Button>\r\n                {saveButton.text === 'Saving Changes...' && <LinearProgress/>}\r\n            </div>\r\n        )\r\n    } else {\r\n        return(\r\n            <Container sx={{textAlign:'center'}}>\r\n\r\n            <h1>Fetching Information...</h1>\r\n            <LinearProgress></LinearProgress>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Controller\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Client.js",["287","288","289","290","291"],[],"import React from 'react'\r\nimport ValueChanger from './ValueChanger'\r\nimport Grid from '@mui/material/Unstable_Grid2' // Grid version 2\r\nimport Paper from '@mui/material/Paper'\r\nconst xs = {\r\n    small: 12,\r\n    normal: 12,\r\n    large: 12,\r\n}\r\nconst sm = {\r\n    small: 4,\r\n    normal: 6,\r\n    large: 12,\r\n}\r\nconst md = {\r\n    small: 2,\r\n    normal: 2,\r\n    large: 12,\r\n}\r\nconst xl = {\r\n    small: 1,\r\n    normal: 1,\r\n    large: 1,\r\n}\r\nfunction Client(props) {\r\n    let valueChangerGlobalList = []\r\n    let connectedDevicesList = []\r\n    let databasesList = []\r\n    let servicesList = []\r\n    const sendChange = (changes) => {\r\n        console.log(changes)\r\n        props.onValueChange([props.clientNumber, changes])\r\n    }\r\n\r\n    for (const [property, value] of Object.entries(props.properties)) {\r\n        const size = props.propertiesDB[property]['size'] || 'large'\r\n        if(props.propertiesDB[property]['enabled'] === false){\r\n            continue\r\n        }\r\n        const component = (\r\n            <Grid key={property} xs={6} md={4} sx={{mb: '2px'}}>\r\n                <ValueChanger\r\n                    property={property}\r\n                    keyHistory={[]}\r\n                    value={value}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n        )\r\n\r\n        switch(property){//replace this with DB check\r\n            case('connectedDevices'):\r\n                connectedDevicesList.push(component)\r\n                break;\r\n            case('services'):\r\n                servicesList.push(component)\r\n                break;\r\n            case('databases'):\r\n                databasesList.push(component)\r\n                break;\r\n            case('slackChannels'):\r\n                servicesList.push(component)\r\n                break;\r\n            default:\r\n                valueChangerGlobalList.push(component)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Client: {props.clientName}</h2>\r\n            <Paper elevation={5}>\r\n                <Grid container spacing={1} alignItems=\"center\" sx={{ px: 1 }}>\r\n                    {valueChangerGlobalList}\r\n                </Grid>\r\n            </Paper>\r\n\r\n            <Paper elevation={1}>{connectedDevicesList}</Paper>\r\n            <Paper elevation={1}>{servicesList}</Paper>\r\n            <Paper elevation={1}>{databasesList}</Paper>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Client\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ValueChanger.js",["292","293"],["294"],"/* eslint-disable default-case */\r\nimport SliderChanger from './SliderChanger.js'\r\nimport React, {useEffect} from 'react'\r\nimport { Box, Paper } from '@mui/material/'\r\nimport BooleanChanger from './BooleanChanger.js'\r\nimport DropdownChanger from './DropdownChanger.js'\r\nimport ListChanger from './ListChanger.js'\r\nimport Section from './Section.js'\r\nimport CollapsibleChanger from './CollapsibleChanger.js'\r\nimport TextChanger from './TextChanger.js'\r\nimport ScopeChanger from './ScopeChanger.js'\r\n\r\nimport { Component } from 'react'\r\n\r\n\r\nfunction ValueChanger(props) {\r\n    //Add steps and min and max ranges.\r\n    const styles = {\r\n        bigBox:{\r\n            px: 1,\r\n            textAlign: 'center', \r\n            border: props.hasBorder ? 'solid 0px' : 'none'\r\n        },\r\n        smallBox:{\r\n            px: 1, \r\n            height: 70,\r\n            textAlign: 'center', \r\n            border: props.hasBorder ? 'solid 0px' : 'none'\r\n        },\r\n        smallBoxH2:{\r\n            fontSize: '10px', \r\n            margin: 1\r\n        }\r\n    }\r\n\r\n    const [valueChanger, isLarge] = createValueChanger(props)\r\n    //const fontSize = '10px'//Math.min(190 / props.propertiesDB[props.property].name.length, 13) \r\n    if(isLarge){\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={styles.bigBox}>\r\n                    <h2 style={{   }}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    else{\r\n        return (\r\n            <Paper elevation={4}>\r\n                <Box sx={ styles.smallBox }>\r\n                    <h2 style={styles.smallBoxH2}>{props.propertiesDB[props.property].name}</h2>\r\n                    {valueChanger}\r\n                </Box>\r\n            </Paper>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nfunction createValueChanger(props) {\r\n    const sendChange = (newValue) => {\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    const getOptions = (property) => {\r\n        return props.propertiesDB[property]['options'] //Only place to change this\r\n    }\r\n    let valueChangerComponent\r\n    let isLarge = false\r\n    const componentType = props.propertiesDB[props.property]['type']\r\n    const newKeyHistory = [...props.keyHistory, props.property]\r\n    const levelTooLow = props.userLevel < props.propertiesDB[props.property]['permission']\r\n\r\n    switch (\r\n        componentType //THIS WILL BE THE LOOKUP TABLE\r\n    ) {\r\n        case 'boolean':\r\n            valueChangerComponent = (\r\n                <BooleanChanger\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                ></BooleanChanger>\r\n            )\r\n            break\r\n        case 'slider':\r\n            valueChangerComponent = (\r\n                <SliderChanger\r\n                    sx={{}}\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n                ></SliderChanger>\r\n            )\r\n            break\r\n        case 'dropDown':\r\n            valueChangerComponent = (\r\n                <DropdownChanger\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    value={props.value}\r\n                    options={getOptions(props.property)}\r\n             \r\n                ></DropdownChanger>\r\n            )\r\n            break\r\n        case 'section':\r\n            valueChangerComponent = (\r\n                <Section\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></Section>\r\n            )\r\n            isLarge = true\r\n            break\r\n        case 'collapsible':\r\n            valueChangerComponent = (\r\n                <CollapsibleChanger\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                ></CollapsibleChanger>\r\n            )\r\n            isLarge = true\r\n\r\n            break\r\n        case 'text':\r\n            valueChangerComponent = (\r\n                <TextChanger\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></TextChanger>\r\n            )\r\n            break\r\n        case 'list':\r\n            valueChangerComponent = (\r\n                <ListChanger\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></ListChanger>\r\n            )\r\n            isLarge = true\r\n            break\r\n        case 'scope':\r\n            isLarge = true\r\n            valueChangerComponent = (\r\n                <ScopeChanger\r\n                    isDisabled={props.isDisabled || levelTooLow}\r\n                    value={props.value}\r\n                    onValueChange={sendChange}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    property={props.property}\r\n                    propertiesDB={props.propertiesDB}\r\n                ></ScopeChanger>\r\n            )\r\n            break\r\n    }\r\n    return [valueChangerComponent, isLarge]\r\n}\r\n\r\nexport default ValueChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\SliderChanger.js",["295","296","297"],[],"import React, { useState, useEffect } from 'react'\r\nimport MuiInput from '@mui/material/Input'\r\nimport TextField from '@mui/material/TextField'\r\nimport Slider from '@mui/material/Slider'\r\n\r\nfunction SliderChanger(props) {//somehow helper text goes away right away after clicking away\r\n    \r\n    const [errorText, setErrorText] = useState(null)\r\n    const [value, setValue] = useState(Number(props.value))\r\n    const options = props.options\r\n    useEffect(()=>{setValue(valueValid(value))},[])\r\n    const sendChange = () => {\r\n        props.onValueChange([props.keyHistory, value])\r\n    }\r\n    const handleChange = (event, newValue) => {\r\n        setValue(event.target.value === '' ? '' : valueValid(Number(event.target.value)))\r\n        \r\n    }\r\n    function valueValid(v){//CHECK IF VALUE IS ALLOWED ACCORDING TO OPTIONS\r\n        let tempValue = v\r\n   \r\n        if (tempValue < options.min) {\r\n            tempValue = options.min\r\n            setErrorText(\"Set to min\")\r\n            \r\n        } else if (tempValue > options.max) {\r\n            tempValue = options.max\r\n            setErrorText(\"Set to max\")\r\n        }\r\n        else{\r\n            let finalNumber = (options.step * Math.round(tempValue / options.step))//Make sure correct incrememnt\r\n            finalNumber = finalNumber.toFixed(Math.abs(Math.log10(options.step)))//Remove any trailing zeros due to float addition bug\r\n            finalNumber = parseFloat(finalNumber)//Convert back to a float\r\n            if(finalNumber !== tempValue){\r\n                console.log(\"Changed value with steps\")\r\n                // setIsError(true)\r\n                setErrorText(\"Invalid Increment\")\r\n            }\r\n            else{\r\n                setErrorText('')\r\n            }\r\n            return(finalNumber)\r\n        }\r\n\r\n        return(tempValue) //Make value to closest step\r\n    }\r\n    const handleBlur = () => {\r\n        setValue(valueValid(value))\r\n        sendChange(value)\r\n    }\r\n    \r\n    return (\r\n        // <Slider size=\"small\" sx={{width: '90%', mt: 1, color: 'crimson'}} valueLabelDisplay=\"on\" value={value} min={options.min} max={options.max} step={options.step} marks={options.marks} track={options.track} onChange={handleChange} onChangeCommitted={sendChange}></Slider>\r\n        \r\n        <div>\r\n            <TextField\r\n            disabled={props.isDisabled}\r\n            value={value}\r\n            sx={{height: 70}}\r\n\r\n            size={'small'}\r\n            helperText={errorText}\r\n            inputProps={{\r\n                step: options.step,\r\n                min: options.min,\r\n                max: options.max,\r\n                type: 'number',\r\n                style: { fontSize: '1em', textAlign: 'center' },\r\n            }}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n        ></TextField>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SliderChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Section.js",["298"],[],"import ValueChanger from './ValueChanger'\r\nimport Stack from '@mui/material/Stack'\r\nimport Grid from '@mui/material/Unstable_Grid2'\r\nfunction Section(props) {\r\n    console.log(props.property)\r\n    console.log(props.value)\r\n    let valueChangerList = []\r\n    let listChangerList = []\r\n\r\n    const sendChange = (newValue) => {\r\n        console.log(props.property)\r\n        console.log(newValue)\r\n        props.onValueChange(newValue)\r\n    }\r\n    for (const [property, value] of Object.entries(props.value)) {\r\n        if(props.propertiesDB[property]['type'] === 'list'){\r\n            listChangerList.push(\r\n                <Grid key={property} md={6}>\r\n                <ValueChanger\r\n                    sx={{}}\r\n                    key={property}\r\n                    property={property}\r\n                    value={value}\r\n                    userLevel={props.userLevel}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n                </Grid>\r\n            )\r\n        }\r\n        else{\r\n            valueChangerList.push(\r\n                <Grid keys={property} md={12}>\r\n                <ValueChanger\r\n                    sx={{}}\r\n                    key={property}\r\n                    property={property}\r\n                    value={value}\r\n                    userLevel={props.userLevel}\r\n                    keyHistory={props.keyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    scopesDB={props.scopesDB}\r\n                    onValueChange={sendChange}\r\n                ></ValueChanger>\r\n                </Grid>\r\n\r\n            )\r\n        }\r\n    }\r\n    return(\r\n        <Grid container>\r\n            {valueChangerList}\r\n            {listChangerList}\r\n        </Grid>\r\n    )\r\n    // return (\r\n    //     <Stack spacing={0} sx={{}}>\r\n    //         {valueChangerList}\r\n    //     </Stack>\r\n    // )\r\n}\r\nexport default Section\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\BooleanChanger.js",[],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\DropdownChanger.js",["299"],[],"import React, { useEffect, useState } from 'react'\r\nimport Select from '@mui/material/Select'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nfunction DropdownChanger(props) {\r\n    const [value, setValue] = useState(props.value)\r\n    const handleChange = (event) => {\r\n        console.log(props.value)\r\n        setValue(event.target.value)\r\n        props.onValueChange([props.keyHistory, event.target.value])\r\n    }\r\n\r\n    let returnSelect\r\n    const style={ minWidth: 5, fontSize: '1em' }\r\n    if (props.options.differentLabels) {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" sx={style} MenuProps={{ PaperProps: { sx: { maxHeight: 200 } } }}\r\n            value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option.value} value={option.value} style={{fontSize: '1em'}}>\r\n                        {option.label}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    } else {\r\n        returnSelect = (\r\n            <Select disabled={props.isDisabled} size=\"small\" MenuProps={{ PaperProps: { sx: {} } }} sx={style} value={value} onChange={handleChange}>\r\n                {props.options.selections.map((option) => (\r\n                    <MenuItem key={option} value={option} style={{}}>\r\n                        {option}{' '}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        )\r\n    }\r\n    return returnSelect\r\n}\r\n\r\nexport default DropdownChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ScopeChanger.js",["300","301","302","303","304","305"],["306"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2'\r\nimport Box from '@mui/material/Box'\r\nimport { Accordion, AccordionSummary, AccordionDetails, Button, TextField } from '@mui/material'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport AddIcon from '@mui/icons-material/AddCircle'\r\nimport RemoveIcon from '@mui/icons-material/RemoveCircle'\r\n\r\nimport ImageList from '@mui/material/ImageList'\r\nimport ImageListItem from '@mui/material/ImageListItem'\r\nimport ValueChanger from './ValueChanger'\r\nimport ChannelChanger from './ChannelChanger.js'\r\nimport SliderChanger from './SliderChanger.js'\r\n\r\nlet childKey = 0 //This is to ensure that the key of the channel changes each re render. So the channel will actually be remade.\r\n//FOR DTACQ - CHANNELS ARE ONLY REMOVED WHEN DEACTIVATED IF THEY ARE AT THE END.\r\n\r\n\r\nfunction ScopeChanger(props) {\r\n    const properties = props.value\r\n    const newKeyHistory = [...props.keyHistory, props.scopeIndex]\r\n    const [currentType, setCurrentType] = useState(properties['type'])\r\n    const [addingChannel, setAddingChannel] = useState(false)//Just a way to refresh all scopes. Could be called refreshScope. \r\n    const scopeProperties = useRef({ ...props.value })\r\n    const setDefaults = useRef(false)\r\n\r\n    let channels = []\r\n\r\n    console.log(scopeProperties.current)\r\n\r\n    const typeDB = props.scopesDB[currentType]\r\n    const saveChange = (newValue) => {\r\n        console.log(newValue)\r\n        const keyHistory = newValue[0]\r\n        const keyHistoryLength = keyHistory.length\r\n        let firstIndex = keyHistoryLength - 1\r\n        while (keyHistory[firstIndex] !== 'Scopes') {\r\n            firstIndex--\r\n        }\r\n        firstIndex += 2 //Add 2 because firstIndex is currently at current 'Scope'. Go to the property\r\n        let tempObj = scopeProperties.current\r\n        for (let i = firstIndex; i < keyHistoryLength - 1; i++) {\r\n            tempObj = tempObj[keyHistory[i]]\r\n        }\r\n        tempObj[keyHistory[keyHistoryLength - 1]] = newValue[1]\r\n        console.log(scopeProperties.current)\r\n        setAddingChannel(!addingChannel)//SINCE CHANGING A PROPERTY CAN HAVE EFFECTS ON OTHERS, REFRESH EVERYTHING\r\n        sendChanges()\r\n    }\r\n    const sendChanges = () => {\r\n        console.log(scopeProperties.current)\r\n        props.onValueChange([[...props.keyHistory, props.scopeIndex], scopeProperties.current])\r\n    }\r\n    const changeScopeType = (newType) => {\r\n        setDefaults.current = true\r\n        console.log(`${currentType} | ${newType[1]}`)//[1] since first part is keyHistory\r\n\r\n        setCurrentType(newType[1])\r\n        //saveChange(newType);\r\n    }\r\n\r\n    const getDefaultChannel = () => {\r\n        let returnChannel = {}\r\n        for (const [,value] of Object.entries(typeDB['channelProperties'])) {\r\n            returnChannel[value['name']] = value['defaultValue']\r\n        }\r\n        console.log(returnChannel)\r\n        return returnChannel\r\n    }\r\n    const channelUpdate = (channel) => {\r\n        if (!scopeProperties.current['activeChannels'].includes(channel)) {\r\n            console.log('Channel not enabled currently')\r\n            scopeProperties.current['activeChannels'].push(channel)\r\n            scopeProperties.current['channelsConfigSettings'][channel] = getDefaultChannel()\r\n        } else {\r\n            delete scopeProperties.current['channelsConfigSettings'][channel]\r\n            scopeProperties.current['activeChannels'].splice(scopeProperties.current['activeChannels'].indexOf(channel), 1)\r\n        }\r\n        console.log(scopeProperties.current)\r\n\r\n    }\r\n    const addChannel = (amountOfChannels) => {\r\n\r\n        for(let i = 0; i < amountOfChannels; i++){\r\n            const newChannelNumber = scopeProperties.current['activeChannels'].length > 0 ? scopeProperties.current['activeChannels'][scopeProperties.current['activeChannels'].length - 1] + 1 : 1\r\n            channelUpdate(newChannelNumber)\r\n            setAddingChannel(!addingChannel)\r\n        }\r\n\r\n        console.log(scopeProperties.current)\r\n    }\r\n    const removeChannel = (amountOfChannels) => {\r\n        const activeChannelsRef = scopeProperties.current['activeChannels']\r\n        let activeChannelLength = activeChannelsRef.length\r\n        if(activeChannelLength > 1 && amountOfChannels - 1 < activeChannelsRef[activeChannelLength - 1] - activeChannelsRef[0]){\r\n            // for(let i = 0; i < amountOfChannels; i++){\r\n            //     channelUpdate(scopeProperties.current['activeChannels'][scopeProperties.current['activeChannels'].length - 1])\r\n            // }\r\n            let i = 0;\r\n            while(i < amountOfChannels){\r\n                let inc = activeChannelsRef[activeChannelLength - 1] - activeChannelsRef[activeChannelLength - 2] \r\n                channelUpdate(activeChannelsRef[activeChannelLength - 1])\r\n                activeChannelLength--\r\n                i += inc\r\n            }\r\n            //setAddingChannel(!addingChannel)\r\n        }\r\n        setAddingChannel(!addingChannel)\r\n        console.log(scopeProperties.current['activeChannels'])\r\n    }\r\n    const nameUpdates = (newName) => {\r\n        saveChange(newName)\r\n    }\r\n    const channelCopy = ([channelsExpression, channelNumber]) => {\r\n        console.log(`Channel: ${channelsExpression}, # ${channelNumber}`)\r\n        const copyToChannel =(cNum) => {\r\n            console.log(cNum)\r\n            if(!scopeProperties.current['activeChannels'].includes(cNum)){\r\n                channelUpdate(cNum)\r\n            }\r\n            const targetChannel = scopeProperties.current['channelsConfigSettings'][cNum]\r\n            for(let [key, value] of Object.entries(baseChannel)){\r\n                if(key === 'name'){\r\n                    continue\r\n                }\r\n                targetChannel[key] = value\r\n                console.log(`key: ${key} value ${value}`)\r\n            }\r\n        }\r\n        const baseChannel = scopeProperties.current['channelsConfigSettings'][channelNumber]\r\n        for(let channel of channelsExpression.split(',')){\r\n            if(channel === channelNumber){\r\n                continue\r\n            }\r\n            if(channel.includes('-')){\r\n                const [minChannel, maxChannel] = channel.split('-')\r\n                for(let channelCounter = minChannel; channelCounter <= maxChannel; channelCounter++){\r\n                    copyToChannel(parseInt(channelCounter))\r\n                }\r\n            }\r\n            else{\r\n                copyToChannel(parseInt(channel))\r\n            }\r\n \r\n \r\n            \r\n\r\n        }\r\n        console.log(scopeProperties.current)\r\n        setAddingChannel(!addingChannel)\r\n    }\r\n    const getChannelOptions = (channelNumber) => {//GET DYNAMIC PROPERTY OPTIONS\r\n        let optionObject = {}\r\n        console.log(\"GETTING CHANNEL OPTIONS for \" + channelNumber)\r\n        for(const [key, value] of Object.entries(typeDB['channelProperties'])){\r\n            if(value['dynamic'] === true){//IS DYNAMIC\r\n                console.log(key + ' : dynamic' )\r\n                let dynamicOption = JSON.parse(JSON.stringify(value))\r\n                for(const [optionsKey, optionsValue] of Object.entries(dynamicOption['options'])){\r\n                    if(isNaN(Number(optionsValue))){\r\n                        const optionArray = optionsValue.split(\" \")\r\n                        for (let i in optionArray){\r\n                            if(isNaN(optionArray[i]) && optionArray[i].length > 1){\r\n                                if(scopeProperties.current['activeChannels'].includes(channelNumber)){\r\n                                    optionArray[i] = scopeProperties.current['channelsConfigSettings'][channelNumber][optionArray[i]]\r\n                                    //What if channel isn't active. Still need something because that channelNumber doesnt exist in scopeProperties\r\n                                }\r\n                                else{\r\n                                    optionArray[i] = typeDB['channelProperties'][optionArray[i]]['defaultValue'] //DEFAULT VALUE\r\n                                }\r\n                            }\r\n                        }\r\n                        const exp = optionArray.join(' ')\r\n                        // eslint-disable-next-line no-eval\r\n                        dynamicOption['options'][optionsKey] = eval(exp)//THIS COULD BE DANGEROUS\r\n                    }\r\n                }\r\n                optionObject[key] = {...dynamicOption}\r\n            }\r\n            else{\r\n                optionObject[key] = typeDB['channelProperties'][key]\r\n                //optionObject = typeDB['channelProperties']//This just overrites the entire object with the non raw one\r\n                \r\n            }\r\n            //console.log(optionObject)\r\n\r\n        }\r\n        return optionObject\r\n    }\r\n\r\n    for (let channelIndex = 1; channelIndex <= (currentType === 'dtacq' ? scopeProperties.current['activeChannels'][scopeProperties.current['activeChannels'].length - 1] : typeDB['maxChannels']); channelIndex++) {\r\n        let isActive = scopeProperties.current['activeChannels'].includes(channelIndex)\r\n        let channelValue = isActive ? scopeProperties.current['channelsConfigSettings'][channelIndex] : getDefaultChannel()\r\n        channels.push(\r\n            <ImageListItem key={++childKey}>\r\n                <ChannelChanger\r\n                    value={channelValue}\r\n                    setDefaults={false}\r\n                    channelNumber={channelIndex}\r\n                    isActive={isActive}\r\n                    keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]}\r\n                    propertiesDB={getChannelOptions(channelIndex)}\r\n                    onValueChange={saveChange}\r\n                    onChannelCopy={channelCopy}\r\n                    channelUpdate={channelUpdate}\r\n                ></ChannelChanger>\r\n            </ImageListItem>\r\n        )\r\n        \r\n    }\r\n    console.log(scopeProperties.current)\r\n    //childKey++;\r\n    return (\r\n        <Grid container columns={16} spacing={1} sx={{ px: 1 }} >\r\n            {/* ROW 1 */}\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'connectionString'}\r\n                    value={properties['connectionString']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'waveFormat'}\r\n                    isDisabled={properties['waveFormat'] ? false : true}\r\n                    value={properties['waveFormat'] ? properties['waveFormat'] : 'BYTE'}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerReference'}\r\n                    isDisabled={typeDB['triggerReference']['isDisabled']}\r\n                    value={typeDB['triggerReference']['isDisabled'] || setDefaults.current ? '' : properties[typeDB['triggerReference']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={4}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'name'}\r\n                    value={properties['name']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={nameUpdates}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'filePath'}\r\n                    value={properties['filePath']}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={props.propertiesDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'fileFormat'}\r\n                    value={properties['fileFormat']}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={props.propertiesDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 1 */}\r\n            {/* ROW 2 */}\r\n            <Grid md={2}>\r\n                <ValueChanger\r\n                    property={'type'}\r\n                    value={properties['type']}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={changeScopeType}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerType'}\r\n                    value={properties['triggerType']}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'memSize'}\r\n                    isDisabled={typeDB['memSize']['isDisabled']}\r\n                    value={typeDB['memSize']['isDisabled'] || setDefaults.current ? typeDB['memSize']['defaultValue'] : properties[typeDB['memSize']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'tdiv'}\r\n                    isDisabled={typeDB['tdiv']['isDisabled']}\r\n                    value={typeDB['tdiv']['isDisabled'] || setDefaults.current ? typeDB['tdiv']['defaultValue'] : properties[typeDB['tdiv']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'samplingRate'}\r\n                    isDisabled={typeDB['samplingRate']['isDisabled']}\r\n                    value={typeDB['samplingRate']['isDisabled'] || setDefaults.current ? typeDB['samplingRate']['defaultValue'] : properties[typeDB['samplingRate']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'timeOffset'}\r\n                    isDisabled={typeDB['timeOffset']['isDisabled']}\r\n                    value={typeDB['timeOffset']['isDisabled'] || setDefaults.current ? typeDB['timeOffset']['defaultValue'] : properties[typeDB['timeOffset']['name']]}\r\n                    keyHistory={newKeyHistory}\r\n                    userLevel={props.userLevel}\r\n                    propertiesDB={typeDB}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerLevel'}\r\n                    isDisabled={typeDB['triggerLevel']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerLevel']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerLevel']['defaultValue']\r\n                            : properties[typeDB['triggerLevel']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger key={++childKey}\r\n                    property={'triggerDelay'}\r\n                    isDisabled={typeDB['triggerDelay']['isDisabled']}\r\n                    value={\r\n                        typeDB['triggerDelay']['isDisabled'] || setDefaults.current\r\n                            ? typeDB['triggerDelay']['defaultValue']\r\n                            : properties[typeDB['triggerDelay']['name']]\r\n                    }\r\n                    keyHistory={newKeyHistory}\r\n                    propertiesDB={typeDB}\r\n                    userLevel={props.userLevel}\r\n                    onValueChange={saveChange}\r\n                ></ValueChanger>\r\n            </Grid>\r\n            {/* ROW 2 */}\r\n\r\n            {/* ROW 3 */}\r\n\r\n            <Grid md={16}>\r\n                <ImageList\r\n                    sx={{\r\n                        gridAutoFlow: 'column',\r\n                        gridTemplateColumns: 'repeat(auto-fill,minmax(25%,1fr)) !important',\r\n                        gridAutoColumns: 'minmax(25%, 1fr)',\r\n                        overflowY: 'hidden',\r\n          \r\n                    }}\r\n                >\r\n                    {channels}\r\n                </ImageList>\r\n            </Grid>\r\n            <Grid md={16} xs={16}>\r\n                <Button sx={{fontSize: '1em', mr: 1}} variant=\"contained\" onClick={sendChanges}>\r\n                    Save Scope\r\n                </Button>\r\n                {/* <Button disabled={currentType === 'dtacq' ? false : true} sx={{mx: 1}}variant=\"contained\" onClick={addChannel}>\r\n                    Add Channel\r\n                </Button> */}\r\n                <ChannelAmountChanger isDisabled={currentType === 'dtacq' ? false: true} isAdding={true} updateAmount={addChannel}></ChannelAmountChanger>\r\n                <ChannelAmountChanger isDisabled={currentType === 'dtacq' ? false: true} isAdding={false} updateAmount={removeChannel}></ChannelAmountChanger>\r\n\r\n            </Grid>\r\n\r\n            {/* ROW 3 */}\r\n        </Grid>\r\n    )\r\n}\r\nfunction ChannelAmountChanger(props){\r\n    const [channelAmount, setChannelAmount] = useState(1)\r\n    \r\n    const UpdateButton = () => (\r\n        <IconButton disabled={props.isDisabled}onClick={e => props.updateAmount(channelAmount)}>\r\n            {props.isAdding ? <AddIcon/> : <RemoveIcon/>}\r\n        </IconButton>\r\n    )\r\n\r\n\r\n\r\n    const handleAddChannelsChange = (event) => {\r\n        if(!isNaN(event.nativeEvent.data)){\r\n            const value = Math.abs(event.target.value)\r\n            setChannelAmount(value)\r\n        }\r\n    }\r\n    return(\r\n        <TextField disabled={props.isDisabled}\r\n        InputProps={{endAdornment: <UpdateButton/>}}\r\n        inputProps={{style: { textAlign: 'left', fontSize: '1em' } }} sx={{width: '115px'}} \r\n        size=\"small\" label={props.isAdding ? 'Add Channels' : 'Remove Channels'}  value={channelAmount} onChange={handleAddChannelsChange}></TextField>\r\n    )\r\n}\r\n\r\n\r\nexport default ScopeChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\CollapsibleChanger.js",["307","308","309","310","311","312"],[],"import ValueChanger from './ValueChanger'\r\nimport Grid from '@mui/material/Unstable_Grid2' // Grid version 2\r\nimport Stack from '@mui/material/Stack'\r\nimport React, { useState } from 'react'\r\nimport Select from '@mui/material/Select'\r\nimport MenuItem from '@mui/material/MenuItem'\r\nimport { Menu } from '@mui/material'\r\nimport ScopeChanger from './ScopeChanger'\r\nimport { Accordion, AccordionSummary, AccordionDetails } from '@mui/material'\r\n\r\nfunction CollapsibleChanger(props) {\r\n    const [refresh, setRefresh] = useState(false);\r\n    const sendChange = (newValue) => {\r\n        setRefresh(!refresh);//May need to check if value changed was name\r\n        props.onValueChange(newValue)\r\n    }\r\n    console.log(props.scopesDB)\r\n    let items = []\r\n    if(props.property == 'Scopes'){\r\n        for (const [itemNumber, itemValue] of Object.entries(props.value)) {\r\n            items.push(\r\n                <Accordion key={itemNumber} TransitionProps={{ unmountOnExit: true }}>\r\n                    <AccordionSummary>{itemValue.name}</AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <ScopeChanger\r\n                            value={itemValue}\r\n                            propertiesDB={props.propertiesDB}\r\n                            keyHistory={props.keyHistory}\r\n                            scopesDB={props.scopesDB}\r\n                            userLevel={props.userLevel}\r\n                            scopeIndex={itemNumber}\r\n                            onValueChange={sendChange}\r\n                        ></ScopeChanger>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n            )\r\n        }\r\n    }\r\n    else{\r\n        for (const [property, value] of Object.entries(props.value)){\r\n            items.push(\r\n                <Accordion key={property} TransitionProps={{ unmountOnExit: true }}>\r\n                <AccordionSummary>{property}</AccordionSummary>\r\n                <AccordionDetails>\r\n                    <ValueChanger\r\n                        property={property}\r\n                        keyHistory={props.keyHistory}\r\n                        value={value}\r\n                        propertiesDB={props.propertiesDB}\r\n                        userLevel={props.userLevel}\r\n                        onValueChange={sendChange}\r\n                    ></ValueChanger>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n            )\r\n        } \r\n    }\r\n\r\n\r\n    return <div>{items}</div>\r\n\r\n    //     const [currentIndex, setCurrentIndex] = useState(-1);\r\n    //     let valueChangerList = [];\r\n    //     let dropdownItems = [\r\n    //     <MenuItem key={-1} value={-1}>\r\n    //         Hide {props.property}\r\n    //     </MenuItem>\r\n    //     ];\r\n\r\n    //     const sendChange = (newValue) => {\r\n    //         // console.log(currentIndex);\r\n    //         // console.log(props.property);\r\n    //         // console.log(newValue);\r\n    //         // let x = new Object;\r\n    //         // x[currentIndex] = new Object();\r\n    //         // x[currentIndex][newValue[0]] = newValue[1];\r\n    //         // console.log(x);\r\n    //         console.log(newValue)\r\n    //         props.onValueChange(newValue)\r\n    //     }\r\n    //     const handleChange = (event) => {\r\n    //         setCurrentIndex(event.target.value);\r\n    //     }\r\n    //     console.log(props.value);\r\n\r\n    //     for(const [itemNumber, itemValue] of Object.entries(props.value)){\r\n    //         let tempArray = [];\r\n    //         dropdownItems.push(\r\n    //             <MenuItem key={itemNumber} value={itemNumber}>\r\n    //                 {itemValue.name}\r\n    //             </MenuItem>\r\n    //         )\r\n    //         for(const [property, value] of Object.entries(itemValue)){\r\n    //             tempArray.push(\r\n    //                 <Grid key={property} xs={12} sm={6} md={4} xl={3} sx={{pr: 1, pb: 1}}>\r\n    //                     <ValueChanger hasBorder={true} key={props.propertiesDB[property]['id']} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n    //                 </Grid>\r\n    //             )\r\n    //         }\r\n    //         valueChangerList.push(\r\n    //             <Accordion key={itemNumber} defaultExpanded={false} expanded={currentIndex == itemNumber}>\r\n    //                 <AccordionSummary>\r\n    //                     {itemValue.name}\r\n    //                 </AccordionSummary>\r\n    //                 <AccordionDetails>\r\n    //                     <Grid container>\r\n    //                         {tempArray}\r\n    //                     </Grid>\r\n    //                 </AccordionDetails>\r\n    //             </Accordion>\r\n\r\n    //         )\r\n    //     }\r\n\r\n    //     /*keys are how react knows to re-render.\r\n    //     Since every item has same properties and COULD have same value,\r\n    //     we must use something unique. Which is the index + currentIndex to always\r\n    //     make sure we have an offset. We guarantee this offset and uniqueness of keys by multiplying the currentIndex by the items length.\r\n    //     If items 1,2,3 have 3 properties. (index starts at 1) The keys for item 1: 3,4,5. For item 2: 6,7,8 item:3 9,10,11\r\n    //     */\r\n    //     // for(const [property, value] of Object.entries(props.value[currentIndex])){//Change the one to set to the first element. //MAKE THIS A DROP DOWN TO SELECT WHICH PROPERTIES\r\n    //     //     console.log(value);\r\n    //     //     valueChangerList.push(\r\n    //     //         <ValueChanger hasBorder={true} key={keyIndex} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n    //     //     )\r\n    //     //     keyIndex++;\r\n    //     // }\r\n    //    // const [valueChangerList, setValueChangerList] = useState(ta);\r\n\r\n    //     return(\r\n\r\n    //         <Stack spacing={1} sx={{pl: 0,}}>\r\n    //             <Select value={currentIndex} onChange={handleChange} sx={{}}>\r\n    //                 {dropdownItems}\r\n    //             </Select>\r\n    //             {valueChangerList}\r\n    //         </Stack>\r\n\r\n    //     )\r\n}\r\n\r\nexport default CollapsibleChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\TextChanger.js",["313","314"],[],"import React, { useState } from 'react'\r\nimport TextField from '@mui/material/TextField'\r\nimport { textAlign } from '@mui/system'\r\nfunction TextChanger(props) {\r\n\r\n    const handleChange = (event) => {\r\n        props.onValueChange([props.keyHistory, event.target.value])\r\n\r\n    }\r\n\r\n    return (\r\n        <TextField\r\n            disabled={props.isDisabled}\r\n            size=\"small\"\r\n            sx={{ mb: 0 }}\r\n            inputProps={{ style: { textAlign: 'center', fontSize: '1em' } }}\r\n            defaultValue={props.value}\r\n            onBlur={handleChange}\r\n        ></TextField>\r\n    )\r\n}\r\n\r\nexport default TextChanger\r\n","C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ChannelChanger.js",["315","316"],[],"C:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ListChanger.js",["317","318","319","320","321"],[],"import React, { useRef, useState } from 'react'\r\nimport TextField from '@mui/material/TextField'\r\nimport List from '@mui/material/List'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport ListItemText from '@mui/material/ListItemText'\r\nimport ListItemButton from '@mui/material/ListItemButton'\r\nimport DeleteIcon from '@mui/icons-material/Delete'\r\nimport AddItemIcon from '@mui/icons-material/PostAdd';\r\nimport Box from '@mui/material/Box'\r\n \r\n\r\nimport { textAlign } from '@mui/system'\r\nimport { Container, IconButton, Button } from '@mui/material'\r\nfunction ListChanger(props) {\r\n    const isArray = !props.propertiesDB[props.property].hasKeys\r\n    const [values, setValues] = useState(isArray ? props.value : Object.entries(props.value))\r\n    console.log(values)\r\n    const handleTextChange = (event, i, isKey=null) => {//j is set to null by default. Unless we have a key value item\r\n        let tempArray = [...values]//Arrays are passed as reference so force to be value\r\n        if(isArray){\r\n            tempArray[i] = event.target.value\r\n            console.log(tempArray)\r\n        }\r\n        else{\r\n            tempArray[i][isKey ? 0 : 1] = event.target.value//i s which field. j is whether key or value\r\n        }\r\n\r\n        setValues(tempArray)\r\n    }\r\n\r\n    const handleDeleteButton = (i) => {\r\n        console.log(\"delete: \" + i)\r\n        let tempArray = [...values];\r\n        tempArray.splice(i, 1)\r\n        setValues(tempArray)\r\n    }\r\n    \r\n    const addItem = () => {\r\n        \r\n        setValues(currentValues => [...currentValues, isArray ? '' : ['','']])\r\n    }\r\n    \r\n    const saveChange = () => {\r\n\r\n        props.onValueChange([props.keyHistory, isArray ? values : Object.fromEntries(values)])\r\n        \r\n\r\n    }\r\n    let items = []\r\n\r\n        if(isArray){\r\n            for(let i in values){\r\n                items.push(\r\n                    <ListItem key={i} \r\n                secondaryAction={\r\n                    <IconButton disabled={props.isDisabled}onClick={x => {handleDeleteButton(i) } }>\r\n                        <DeleteIcon/>\r\n                    </IconButton>\r\n                }>\r\n                     <TextField disabled={props.isDisabled }size=\"small\" \r\n                     value={values[i]} \r\n                     sx={{width: '100%', mx: 1}} \r\n                     onChange={e => handleTextChange(e,i)}>\r\n        \r\n                    </TextField>   \r\n                    \r\n                </ListItem>\r\n                )\r\n            }\r\n            return (\r\n                <Container maxWidth=\"xs\">\r\n                    <List sx={{borderRadius: 2,bgcolor: 'background.paper' }} dense={true}>\r\n                            {items}\r\n                       \r\n                            <IconButton disabled={props.isDisabled} onClick={addItem}>\r\n                                <AddItemIcon/>\r\n                            </IconButton>\r\n                       \r\n                        </List>\r\n                    <Button disabled={props.isDisabled} variant=\"contained\" size=\"small\" sx={{width: '100%'}} onClick={saveChange}>\r\n                        Save \r\n                    </Button>\r\n                </Container>\r\n          \r\n        \r\n                \r\n            )\r\n        }\r\n        else{\r\n            for(let i in values){\r\n                items.push(\r\n                    <ListItem key={i} \r\n                    secondaryAction={\r\n                        <IconButton disabled={props.isDisabled}onClick={() => {handleDeleteButton(i) } }>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    }>\r\n                         <TextField disabled={props.isDisabled }size=\"small\" \r\n                         value={values[i][0]} \r\n                        \r\n                         onChange={e => handleTextChange(e, i, true)}>\r\n            \r\n                        </TextField>\r\n    \r\n                        <TextField disabled={props.isDisabled } size=\"small\" \r\n                         value={values[i][1]} \r\n                        \r\n                         onChange={e => handleTextChange(e, i, false)}>\r\n            \r\n                        </TextField>   \r\n                        \r\n                    </ListItem>\r\n                )\r\n            }\r\n            return(\r\n                <Container maxWidth=\"xs\">\r\n                <List sx={{borderRadius: 2,bgcolor: 'background.paper' }} dense={true}>\r\n                        {items}\r\n                   \r\n                        <IconButton disabled={props.isDisabled} onClick={addItem}>\r\n                            <AddItemIcon/>\r\n                        </IconButton>\r\n                   \r\n                    </List>\r\n                <Button disabled={props.isDisabled} variant=\"contained\" size=\"small\" sx={{width: '100%'}} onClick={saveChange}>\r\n                    Save \r\n                </Button>\r\n            </Container>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ListChanger\r\n","c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\index.js",[],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\theme.js",[],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\App.js",["322","323"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Controller.js",["324","325","326","327","328","329","330"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Client.js",["331","332","333","334","335"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ValueChanger.js",["336","337"],["338"],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\DropdownChanger.js",["339"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\BooleanChanger.js",[],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\SliderChanger.js",["340","341","342"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ListChanger.js",["343","344","345","346","347"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ScopeChanger.js",["348","349","350","351","352","353"],["354"],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\Section.js",["355"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\CollapsibleChanger.js",["356","357","358","359","360","361"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\TextChanger.js",["362","363"],[],"c:\\Code\\ReactUI\\ccs\\ccs_configuration_UI\\reactui\\src\\ChannelChanger.js",["364","365"],[],{"ruleId":"366","severity":1,"message":"367","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":11},{"ruleId":"366","severity":1,"message":"370","line":13,"column":11,"nodeType":"368","messageId":"369","endLine":13,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":2,"column":16,"nodeType":"368","messageId":"369","endLine":2,"endColumn":25},{"ruleId":"366","severity":1,"message":"372","line":11,"column":10,"nodeType":"368","messageId":"369","endLine":11,"endColumn":19},{"ruleId":"373","severity":1,"message":"374","line":53,"column":5,"nodeType":"375","messageId":"376","endLine":144,"endColumn":6},{"ruleId":"366","severity":1,"message":"377","line":4,"column":8,"nodeType":"368","messageId":"369","endLine":4,"endColumn":14},{"ruleId":"366","severity":1,"message":"371","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":26},{"ruleId":"366","severity":1,"message":"378","line":12,"column":9,"nodeType":"368","messageId":"369","endLine":12,"endColumn":10},{"ruleId":"366","severity":1,"message":"379","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":12},{"ruleId":"366","severity":1,"message":"380","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":13},{"ruleId":"366","severity":1,"message":"381","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"382","line":6,"column":8,"nodeType":"368","messageId":"369","endLine":6,"endColumn":16},{"ruleId":"366","severity":1,"message":"383","line":7,"column":10,"nodeType":"368","messageId":"369","endLine":7,"endColumn":14},{"ruleId":"384","severity":1,"message":"385","line":19,"column":23,"nodeType":"386","messageId":"387","endLine":19,"endColumn":25},{"ruleId":"366","severity":1,"message":"388","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":25},{"ruleId":"366","severity":1,"message":"389","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":19},{"ruleId":"366","severity":1,"message":"390","line":5,"column":9,"nodeType":"368","messageId":"369","endLine":5,"endColumn":18},{"ruleId":"366","severity":1,"message":"371","line":1,"column":27,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"367","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":11},{"ruleId":"366","severity":1,"message":"391","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":19},{"ruleId":"366","severity":1,"message":"392","line":4,"column":21,"nodeType":"368","messageId":"369","endLine":4,"endColumn":37},{"ruleId":"366","severity":1,"message":"393","line":4,"column":39,"nodeType":"368","messageId":"369","endLine":4,"endColumn":55},{"ruleId":"366","severity":1,"message":"371","line":1,"column":27,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"367","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":11},{"ruleId":"366","severity":1,"message":"394","line":5,"column":38,"nodeType":"368","messageId":"369","endLine":5,"endColumn":48},{"ruleId":"366","severity":1,"message":"395","line":2,"column":10,"nodeType":"368","messageId":"369","endLine":2,"endColumn":26},{"ruleId":"366","severity":1,"message":"396","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":21},{"ruleId":"366","severity":1,"message":"397","line":10,"column":10,"nodeType":"368","messageId":"369","endLine":10,"endColumn":16},{"ruleId":"366","severity":1,"message":"398","line":13,"column":20,"nodeType":"368","messageId":"369","endLine":13,"endColumn":41},{"ruleId":"366","severity":1,"message":"399","line":18,"column":11,"nodeType":"368","messageId":"369","endLine":18,"endColumn":16},{"ruleId":"366","severity":1,"message":"400","line":21,"column":12,"nodeType":"368","messageId":"369","endLine":21,"endColumn":21},{"ruleId":"366","severity":1,"message":"401","line":21,"column":23,"nodeType":"368","messageId":"369","endLine":21,"endColumn":35},{"ruleId":"366","severity":1,"message":"402","line":5,"column":7,"nodeType":"368","messageId":"369","endLine":5,"endColumn":9},{"ruleId":"366","severity":1,"message":"403","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":9},{"ruleId":"366","severity":1,"message":"404","line":15,"column":7,"nodeType":"368","messageId":"369","endLine":15,"endColumn":9},{"ruleId":"366","severity":1,"message":"405","line":20,"column":7,"nodeType":"368","messageId":"369","endLine":20,"endColumn":9},{"ruleId":"366","severity":1,"message":"406","line":36,"column":15,"nodeType":"368","messageId":"369","endLine":36,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":3,"column":16,"nodeType":"368","messageId":"369","endLine":3,"endColumn":25},{"ruleId":"366","severity":1,"message":"372","line":13,"column":10,"nodeType":"368","messageId":"369","endLine":13,"endColumn":19},{"ruleId":"373","severity":1,"message":"374","line":75,"column":5,"nodeType":"375","messageId":"376","endLine":182,"endColumn":6,"suppressions":"407"},{"ruleId":"366","severity":1,"message":"408","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":16},{"ruleId":"366","severity":1,"message":"377","line":4,"column":8,"nodeType":"368","messageId":"369","endLine":4,"endColumn":14},{"ruleId":"409","severity":1,"message":"410","line":11,"column":49,"nodeType":"411","endLine":11,"endColumn":51,"suggestions":"412"},{"ruleId":"366","severity":1,"message":"380","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":13},{"ruleId":"366","severity":1,"message":"371","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":26},{"ruleId":"366","severity":1,"message":"371","line":1,"column":27,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"367","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":11},{"ruleId":"366","severity":1,"message":"391","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":19},{"ruleId":"366","severity":1,"message":"392","line":4,"column":21,"nodeType":"368","messageId":"369","endLine":4,"endColumn":37},{"ruleId":"366","severity":1,"message":"393","line":4,"column":39,"nodeType":"368","messageId":"369","endLine":4,"endColumn":55},{"ruleId":"366","severity":1,"message":"413","line":13,"column":8,"nodeType":"368","messageId":"369","endLine":13,"endColumn":21},{"ruleId":"414","severity":1,"message":"415","line":175,"column":64,"nodeType":"416","messageId":"387","endLine":175,"endColumn":68,"suppressions":"417"},{"ruleId":"366","severity":1,"message":"379","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":12},{"ruleId":"366","severity":1,"message":"380","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":13},{"ruleId":"366","severity":1,"message":"381","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"382","line":6,"column":8,"nodeType":"368","messageId":"369","endLine":6,"endColumn":16},{"ruleId":"366","severity":1,"message":"383","line":7,"column":10,"nodeType":"368","messageId":"369","endLine":7,"endColumn":14},{"ruleId":"384","severity":1,"message":"385","line":19,"column":23,"nodeType":"386","messageId":"387","endLine":19,"endColumn":25},{"ruleId":"366","severity":1,"message":"388","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":25},{"ruleId":"366","severity":1,"message":"389","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":1,"column":27,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"418","line":10,"column":8,"nodeType":"368","messageId":"369","endLine":10,"endColumn":19},{"ruleId":"366","severity":1,"message":"419","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":23},{"ruleId":"366","severity":1,"message":"420","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":20},{"ruleId":"366","severity":1,"message":"421","line":6,"column":8,"nodeType":"368","messageId":"369","endLine":6,"endColumn":22},{"ruleId":"366","severity":1,"message":"367","line":9,"column":8,"nodeType":"368","messageId":"369","endLine":9,"endColumn":11},{"ruleId":"366","severity":1,"message":"389","line":12,"column":10,"nodeType":"368","messageId":"369","endLine":12,"endColumn":19},{"ruleId":"366","severity":1,"message":"367","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":11},{"ruleId":"366","severity":1,"message":"394","line":5,"column":38,"nodeType":"368","messageId":"369","endLine":5,"endColumn":48},{"ruleId":"366","severity":1,"message":"395","line":2,"column":10,"nodeType":"368","messageId":"369","endLine":2,"endColumn":26},{"ruleId":"366","severity":1,"message":"396","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":21},{"ruleId":"366","severity":1,"message":"397","line":10,"column":10,"nodeType":"368","messageId":"369","endLine":10,"endColumn":16},{"ruleId":"366","severity":1,"message":"398","line":13,"column":20,"nodeType":"368","messageId":"369","endLine":13,"endColumn":41},{"ruleId":"366","severity":1,"message":"399","line":18,"column":11,"nodeType":"368","messageId":"369","endLine":18,"endColumn":16},{"ruleId":"366","severity":1,"message":"400","line":21,"column":12,"nodeType":"368","messageId":"369","endLine":21,"endColumn":21},{"ruleId":"366","severity":1,"message":"401","line":21,"column":23,"nodeType":"368","messageId":"369","endLine":21,"endColumn":35},{"ruleId":"366","severity":1,"message":"402","line":5,"column":7,"nodeType":"368","messageId":"369","endLine":5,"endColumn":9},{"ruleId":"366","severity":1,"message":"403","line":10,"column":7,"nodeType":"368","messageId":"369","endLine":10,"endColumn":9},{"ruleId":"366","severity":1,"message":"404","line":15,"column":7,"nodeType":"368","messageId":"369","endLine":15,"endColumn":9},{"ruleId":"366","severity":1,"message":"405","line":20,"column":7,"nodeType":"368","messageId":"369","endLine":20,"endColumn":9},{"ruleId":"366","severity":1,"message":"406","line":36,"column":15,"nodeType":"368","messageId":"369","endLine":36,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":3,"column":16,"nodeType":"368","messageId":"369","endLine":3,"endColumn":25},{"ruleId":"366","severity":1,"message":"372","line":13,"column":10,"nodeType":"368","messageId":"369","endLine":13,"endColumn":19},{"ruleId":"373","severity":1,"message":"374","line":75,"column":5,"nodeType":"375","messageId":"376","endLine":182,"endColumn":6,"suppressions":"422"},{"ruleId":"366","severity":1,"message":"371","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":26},{"ruleId":"366","severity":1,"message":"408","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":16},{"ruleId":"366","severity":1,"message":"377","line":4,"column":8,"nodeType":"368","messageId":"369","endLine":4,"endColumn":14},{"ruleId":"409","severity":1,"message":"410","line":11,"column":49,"nodeType":"411","endLine":11,"endColumn":51,"suggestions":"423"},{"ruleId":"366","severity":1,"message":"419","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":23},{"ruleId":"366","severity":1,"message":"420","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":20},{"ruleId":"366","severity":1,"message":"421","line":6,"column":8,"nodeType":"368","messageId":"369","endLine":6,"endColumn":22},{"ruleId":"366","severity":1,"message":"367","line":9,"column":8,"nodeType":"368","messageId":"369","endLine":9,"endColumn":11},{"ruleId":"366","severity":1,"message":"389","line":12,"column":10,"nodeType":"368","messageId":"369","endLine":12,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":1,"column":27,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"367","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":11},{"ruleId":"366","severity":1,"message":"391","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":19},{"ruleId":"366","severity":1,"message":"392","line":4,"column":21,"nodeType":"368","messageId":"369","endLine":4,"endColumn":37},{"ruleId":"366","severity":1,"message":"393","line":4,"column":39,"nodeType":"368","messageId":"369","endLine":4,"endColumn":55},{"ruleId":"366","severity":1,"message":"413","line":13,"column":8,"nodeType":"368","messageId":"369","endLine":13,"endColumn":21},{"ruleId":"414","severity":1,"message":"415","line":175,"column":64,"nodeType":"416","messageId":"387","endLine":175,"endColumn":68,"suppressions":"424"},{"ruleId":"366","severity":1,"message":"380","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":13},{"ruleId":"366","severity":1,"message":"379","line":2,"column":8,"nodeType":"368","messageId":"369","endLine":2,"endColumn":12},{"ruleId":"366","severity":1,"message":"380","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":13},{"ruleId":"366","severity":1,"message":"381","line":5,"column":8,"nodeType":"368","messageId":"369","endLine":5,"endColumn":14},{"ruleId":"366","severity":1,"message":"382","line":6,"column":8,"nodeType":"368","messageId":"369","endLine":6,"endColumn":16},{"ruleId":"366","severity":1,"message":"383","line":7,"column":10,"nodeType":"368","messageId":"369","endLine":7,"endColumn":14},{"ruleId":"384","severity":1,"message":"385","line":19,"column":23,"nodeType":"386","messageId":"387","endLine":19,"endColumn":25},{"ruleId":"366","severity":1,"message":"388","line":1,"column":17,"nodeType":"368","messageId":"369","endLine":1,"endColumn":25},{"ruleId":"366","severity":1,"message":"389","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":1,"column":27,"nodeType":"368","messageId":"369","endLine":1,"endColumn":36},{"ruleId":"366","severity":1,"message":"418","line":10,"column":8,"nodeType":"368","messageId":"369","endLine":10,"endColumn":19},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'yamlFile' is assigned a value but never used.","'useEffect' is defined but never used.","'Component' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Slider' is defined but never used.","'i' is assigned a value but never used.","'Grid' is defined but never used.","'Stack' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Menu' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'textAlign' is defined but never used.","'isWaiting' is assigned a value but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'makeStyles' is defined but never used.","'CircularProgress' is defined but never used.","'LoadingButton' is defined but never used.","'margin' is defined but never used.","'adminPropertiesConfig' is defined but never used.","'theme' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'xs' is assigned a value but never used.","'sm' is assigned a value but never used.","'md' is assigned a value but never used.","'xl' is assigned a value but never used.","'size' is assigned a value but never used.",["425"],"'MuiInput' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'value' and 'valueValid'. Either include them or remove the dependency array. You can also do a functional update 'setValue(v => ...)' if you only need 'value' in the 'setValue' call.","ArrayExpression",["426"],"'SliderChanger' is defined but never used.","no-eval","eval can be harmful.","CallExpression",["427"],"'TextChanger' is defined but never used.","'useRef' is defined but never used.","'ListItemText' is defined but never used.","'ListItemButton' is defined but never used.",["428"],["429"],["430"],{"kind":"431","justification":"432"},{"desc":"433","fix":"434"},{"kind":"431","justification":"432"},{"kind":"431","justification":"432"},{"desc":"433","fix":"435"},{"kind":"431","justification":"432"},"directive","","Update the dependencies array to be: [value, valueValid]",{"range":"436","text":"437"},{"range":"438","text":"437"},[489,491],"[value, valueValid]",[489,491]]