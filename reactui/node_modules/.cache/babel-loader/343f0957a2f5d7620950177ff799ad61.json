{"ast":null,"code":"import _slicedToArray from\"C:/Code/ReactUI/React/reactui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import ValueChanger from\"./ValueChanger\";import Grid from'@mui/material/Unstable_Grid2';// Grid version 2\nimport Stack from'@mui/material/Stack';import React,{useState}from'react';import Select from'@mui/material/Select';import MenuItem from'@mui/material/MenuItem';import{Menu}from\"@mui/material\";import ScopeChanger from\"./ScopeChanger\";import{Accordion,AccordionSummary,AccordionDetails}from\"@mui/material\";import{jsx as _jsx}from\"react/jsx-runtime\";function CollapsibleChanger(props){console.log(props.value);var scopes=[];for(var _i=0,_Object$entries=Object.entries(props.value);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),itemNumber=_Object$entries$_i[0],itemValue=_Object$entries$_i[1];scopes.push(/*#__PURE__*/_jsx(ScopeChanger,{value:itemValue,propertiesDB:props.propertiesDB,keyHistory:props.keyHistory,scopeIndex:itemNumber},itemNumber));}return/*#__PURE__*/_jsx(\"div\",{children:scopes});//     const [currentIndex, setCurrentIndex] = useState(-1);\n//     let valueChangerList = [];\n//     let dropdownItems = [  \n//     <MenuItem key={-1} value={-1}>\n//         Hide {props.property}\n//     </MenuItem>\n//     ];\n//     const sendChange = (newValue) => {\n//         // console.log(currentIndex);\n//         // console.log(props.property);\n//         // console.log(newValue);\n//         // let x = new Object;\n//         // x[currentIndex] = new Object();\n//         // x[currentIndex][newValue[0]] = newValue[1];\n//         // console.log(x);\n//         console.log(newValue)\n//         props.onValueChange(newValue)\n//     }\n//     const handleChange = (event) => {\n//         setCurrentIndex(event.target.value);\n//     }\n//     console.log(props.value);\n//     for(const [itemNumber, itemValue] of Object.entries(props.value)){\n//         let tempArray = [];\n//         dropdownItems.push(\n//             <MenuItem key={itemNumber} value={itemNumber}>\n//                 {itemValue.name}\n//             </MenuItem>\n//         )\n//         for(const [property, value] of Object.entries(itemValue)){\n//             tempArray.push(\n//                 <Grid key={property} xs={12} sm={6} md={4} xl={3} sx={{pr: 1, pb: 1}}>\n//                     <ValueChanger hasBorder={true} key={props.propertiesDB[property]['id']} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\n//                 </Grid>\n//             )\n//         }\n//         valueChangerList.push(\n//             <Accordion key={itemNumber} defaultExpanded={false} expanded={currentIndex == itemNumber}>\n//                 <AccordionSummary>\n//                     {itemValue.name}\n//                 </AccordionSummary>\n//                 <AccordionDetails>\n//                     <Grid container>\n//                         {tempArray}\n//                     </Grid>\n//                 </AccordionDetails>\n//             </Accordion>\n//         )\n//     }\n//     /*keys are how react knows to re-render. \n//     Since every item has same properties and COULD have same value, \n//     we must use something unique. Which is the index + currentIndex to always \n//     make sure we have an offset. We guarantee this offset and uniqueness of keys by multiplying the currentIndex by the items length.\n//     If items 1,2,3 have 3 properties. (index starts at 1) The keys for item 1: 3,4,5. For item 2: 6,7,8 item:3 9,10,11 \n//     */\n//     // for(const [property, value] of Object.entries(props.value[currentIndex])){//Change the one to set to the first element. //MAKE THIS A DROP DOWN TO SELECT WHICH PROPERTIES\n//     //     console.log(value);\n//     //     valueChangerList.push(\n//     //         <ValueChanger hasBorder={true} key={keyIndex} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\n//     //     )\n//     //     keyIndex++;\n//     // }\n//    // const [valueChangerList, setValueChangerList] = useState(ta);    \n//     return(\n//         <Stack spacing={1} sx={{pl: 0,}}>\n//             <Select value={currentIndex} onChange={handleChange} sx={{}}>\n//                 {dropdownItems}\n//             </Select>\n//             {valueChangerList}\n//         </Stack>\n//     )\n}export default CollapsibleChanger;","map":{"version":3,"names":["ValueChanger","Grid","Stack","React","useState","Select","MenuItem","Menu","ScopeChanger","Accordion","AccordionSummary","AccordionDetails","CollapsibleChanger","props","console","log","value","scopes","Object","entries","itemNumber","itemValue","push","propertiesDB","keyHistory"],"sources":["C:/Code/ReactUI/React/reactui/src/CollapsibleChanger.js"],"sourcesContent":["\r\nimport ValueChanger from \"./ValueChanger\";\r\nimport Grid from '@mui/material/Unstable_Grid2'; // Grid version 2\r\nimport Stack from '@mui/material/Stack';\r\nimport React, { useState } from 'react';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { Menu } from \"@mui/material\";\r\nimport ScopeChanger from \"./ScopeChanger\";\r\nimport {Accordion, AccordionSummary, AccordionDetails} from \"@mui/material\";\r\n\r\n\r\nfunction CollapsibleChanger(props){\r\n\r\n    console.log(props.value);\r\n    let scopes= [];\r\n    for(const [itemNumber, itemValue] of Object.entries(props.value)){\r\n        scopes.push(\r\n            <ScopeChanger key={itemNumber} value={itemValue} propertiesDB={props.propertiesDB} keyHistory={props.keyHistory} scopeIndex={itemNumber}></ScopeChanger>\r\n\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n            {scopes}\r\n       \r\n        </div>\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     const [currentIndex, setCurrentIndex] = useState(-1);\r\n//     let valueChangerList = [];\r\n//     let dropdownItems = [  \r\n//     <MenuItem key={-1} value={-1}>\r\n//         Hide {props.property}\r\n//     </MenuItem>\r\n//     ];\r\n\r\n//     const sendChange = (newValue) => {\r\n//         // console.log(currentIndex);\r\n//         // console.log(props.property);\r\n//         // console.log(newValue);\r\n//         // let x = new Object;\r\n//         // x[currentIndex] = new Object();\r\n//         // x[currentIndex][newValue[0]] = newValue[1];\r\n//         // console.log(x);\r\n//         console.log(newValue)\r\n//         props.onValueChange(newValue)\r\n//     }\r\n//     const handleChange = (event) => {\r\n//         setCurrentIndex(event.target.value);\r\n//     }\r\n//     console.log(props.value);\r\n\r\n//     for(const [itemNumber, itemValue] of Object.entries(props.value)){\r\n//         let tempArray = [];\r\n//         dropdownItems.push(\r\n//             <MenuItem key={itemNumber} value={itemNumber}>\r\n//                 {itemValue.name}\r\n//             </MenuItem>\r\n//         )\r\n//         for(const [property, value] of Object.entries(itemValue)){\r\n//             tempArray.push(\r\n//                 <Grid key={property} xs={12} sm={6} md={4} xl={3} sx={{pr: 1, pb: 1}}>\r\n//                     <ValueChanger hasBorder={true} key={props.propertiesDB[property]['id']} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n//                 </Grid>\r\n//             )\r\n//         }\r\n//         valueChangerList.push(\r\n//             <Accordion key={itemNumber} defaultExpanded={false} expanded={currentIndex == itemNumber}>\r\n//                 <AccordionSummary>\r\n//                     {itemValue.name}\r\n//                 </AccordionSummary>\r\n//                 <AccordionDetails>\r\n//                     <Grid container>\r\n//                         {tempArray}\r\n//                     </Grid>\r\n//                 </AccordionDetails>\r\n//             </Accordion>\r\n\r\n//         )\r\n//     }\r\n\r\n//     /*keys are how react knows to re-render. \r\n//     Since every item has same properties and COULD have same value, \r\n//     we must use something unique. Which is the index + currentIndex to always \r\n//     make sure we have an offset. We guarantee this offset and uniqueness of keys by multiplying the currentIndex by the items length.\r\n//     If items 1,2,3 have 3 properties. (index starts at 1) The keys for item 1: 3,4,5. For item 2: 6,7,8 item:3 9,10,11 \r\n//     */\r\n//     // for(const [property, value] of Object.entries(props.value[currentIndex])){//Change the one to set to the first element. //MAKE THIS A DROP DOWN TO SELECT WHICH PROPERTIES\r\n//     //     console.log(value);\r\n//     //     valueChangerList.push(\r\n//     //         <ValueChanger hasBorder={true} key={keyIndex} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n//     //     )\r\n//     //     keyIndex++;\r\n//     // }\r\n//    // const [valueChangerList, setValueChangerList] = useState(ta);    \r\n\r\n//     return(\r\n        \r\n//         <Stack spacing={1} sx={{pl: 0,}}>\r\n//             <Select value={currentIndex} onChange={handleChange} sx={{}}>\r\n//                 {dropdownItems}\r\n//             </Select>\r\n//             {valueChangerList}\r\n//         </Stack>\r\n\r\n//     )\r\n}\r\n\r\nexport default CollapsibleChanger;"],"mappings":"mHACA,MAAOA,aAAP,KAAyB,gBAAzB,CACA,MAAOC,KAAP,KAAiB,8BAAjB,CAAiD;AACjD,MAAOC,MAAP,KAAkB,qBAAlB,CACA,MAAOC,MAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,OAAP,KAAmB,sBAAnB,CACA,MAAOC,SAAP,KAAqB,wBAArB,CACA,OAASC,IAAT,KAAqB,eAArB,CACA,MAAOC,aAAP,KAAyB,gBAAzB,CACA,OAAQC,SAAR,CAAmBC,gBAAnB,CAAqCC,gBAArC,KAA4D,eAA5D,C,2CAGA,QAASC,mBAAT,CAA4BC,KAA5B,CAAkC,CAE9BC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,KAAlB,EACA,GAAIC,OAAM,CAAE,EAAZ,CACA,6BAAqCC,MAAM,CAACC,OAAP,CAAeN,KAAK,CAACG,KAArB,CAArC,gCAAiE,CAA7D,6DAAOI,UAAP,uBAAmBC,SAAnB,uBACAJ,MAAM,CAACK,IAAP,cACI,KAAC,YAAD,EAA+B,KAAK,CAAED,SAAtC,CAAiD,YAAY,CAAER,KAAK,CAACU,YAArE,CAAmF,UAAU,CAAEV,KAAK,CAACW,UAArG,CAAiH,UAAU,CAAEJ,UAA7H,EAAmBA,UAAnB,CADJ,EAIH,CAED,mBACI,qBAEKH,MAFL,EADJ,CAeJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACC,CAED,cAAeL,mBAAf"},"metadata":{},"sourceType":"module"}