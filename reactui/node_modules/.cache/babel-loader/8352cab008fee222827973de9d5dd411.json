{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\ReactUI\\\\React\\\\reactui\\\\src\\\\CollapsibleChanger.js\",\n    _s = $RefreshSig$();\n\nimport ValueChanger from \"./ValueChanger\";\nimport Grid from '@mui/material/Unstable_Grid2'; // Grid version 2\n\nimport Stack from '@mui/material/Stack';\nimport React, { useState } from 'react';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Menu } from \"@mui/material\";\nimport ScopeChanger from \"./ScopeChanger\";\nimport { Accordion, AccordionSummary, AccordionDetails } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CollapsibleChanger(props) {\n  _s();\n\n  const [refresh, setRefresh] = useState(true);\n\n  const sendChange = newValue => {\n    props.onValueChange(newValue);\n    setRefresh(r => !r);\n  };\n\n  console.log(props.scopesDB);\n  let scopes = [];\n\n  for (const [itemNumber, itemValue] of Object.entries(props.value)) {\n    scopes.push( /*#__PURE__*/_jsxDEV(Accordion, {\n      TransitionProps: {\n        unmountOnExit: true\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n        children: itemValue.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n        children: /*#__PURE__*/_jsxDEV(ScopeChanger, {\n          value: itemValue,\n          propertiesDB: props.propertiesDB,\n          keyHistory: props.keyHistory,\n          scopesDB: props.scopesDB,\n          scopeIndex: itemNumber,\n          onValueChange: sendChange\n        }, itemNumber, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, itemNumber, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: scopes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this); //     const [currentIndex, setCurrentIndex] = useState(-1);\n  //     let valueChangerList = [];\n  //     let dropdownItems = [  \n  //     <MenuItem key={-1} value={-1}>\n  //         Hide {props.property}\n  //     </MenuItem>\n  //     ];\n  //     const sendChange = (newValue) => {\n  //         // console.log(currentIndex);\n  //         // console.log(props.property);\n  //         // console.log(newValue);\n  //         // let x = new Object;\n  //         // x[currentIndex] = new Object();\n  //         // x[currentIndex][newValue[0]] = newValue[1];\n  //         // console.log(x);\n  //         console.log(newValue)\n  //         props.onValueChange(newValue)\n  //     }\n  //     const handleChange = (event) => {\n  //         setCurrentIndex(event.target.value);\n  //     }\n  //     console.log(props.value);\n  //     for(const [itemNumber, itemValue] of Object.entries(props.value)){\n  //         let tempArray = [];\n  //         dropdownItems.push(\n  //             <MenuItem key={itemNumber} value={itemNumber}>\n  //                 {itemValue.name}\n  //             </MenuItem>\n  //         )\n  //         for(const [property, value] of Object.entries(itemValue)){\n  //             tempArray.push(\n  //                 <Grid key={property} xs={12} sm={6} md={4} xl={3} sx={{pr: 1, pb: 1}}>\n  //                     <ValueChanger hasBorder={true} key={props.propertiesDB[property]['id']} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\n  //                 </Grid>\n  //             )\n  //         }\n  //         valueChangerList.push(\n  //             <Accordion key={itemNumber} defaultExpanded={false} expanded={currentIndex == itemNumber}>\n  //                 <AccordionSummary>\n  //                     {itemValue.name}\n  //                 </AccordionSummary>\n  //                 <AccordionDetails>\n  //                     <Grid container>\n  //                         {tempArray}\n  //                     </Grid>\n  //                 </AccordionDetails>\n  //             </Accordion>\n  //         )\n  //     }\n  //     /*keys are how react knows to re-render. \n  //     Since every item has same properties and COULD have same value, \n  //     we must use something unique. Which is the index + currentIndex to always \n  //     make sure we have an offset. We guarantee this offset and uniqueness of keys by multiplying the currentIndex by the items length.\n  //     If items 1,2,3 have 3 properties. (index starts at 1) The keys for item 1: 3,4,5. For item 2: 6,7,8 item:3 9,10,11 \n  //     */\n  //     // for(const [property, value] of Object.entries(props.value[currentIndex])){//Change the one to set to the first element. //MAKE THIS A DROP DOWN TO SELECT WHICH PROPERTIES\n  //     //     console.log(value);\n  //     //     valueChangerList.push(\n  //     //         <ValueChanger hasBorder={true} key={keyIndex} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\n  //     //     )\n  //     //     keyIndex++;\n  //     // }\n  //    // const [valueChangerList, setValueChangerList] = useState(ta);    \n  //     return(\n  //         <Stack spacing={1} sx={{pl: 0,}}>\n  //             <Select value={currentIndex} onChange={handleChange} sx={{}}>\n  //                 {dropdownItems}\n  //             </Select>\n  //             {valueChangerList}\n  //         </Stack>\n  //     )\n}\n\n_s(CollapsibleChanger, \"uhuEMfm25pTlKpkcDEvcjrssCek=\");\n\n_c = CollapsibleChanger;\nexport default CollapsibleChanger;\n\nvar _c;\n\n$RefreshReg$(_c, \"CollapsibleChanger\");","map":{"version":3,"names":["ValueChanger","Grid","Stack","React","useState","Select","MenuItem","Menu","ScopeChanger","Accordion","AccordionSummary","AccordionDetails","CollapsibleChanger","props","refresh","setRefresh","sendChange","newValue","onValueChange","r","console","log","scopesDB","scopes","itemNumber","itemValue","Object","entries","value","push","unmountOnExit","name","propertiesDB","keyHistory"],"sources":["C:/Code/ReactUI/React/reactui/src/CollapsibleChanger.js"],"sourcesContent":["\r\nimport ValueChanger from \"./ValueChanger\";\r\nimport Grid from '@mui/material/Unstable_Grid2'; // Grid version 2\r\nimport Stack from '@mui/material/Stack';\r\nimport React, { useState } from 'react';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { Menu } from \"@mui/material\";\r\nimport ScopeChanger from \"./ScopeChanger\";\r\nimport {Accordion, AccordionSummary, AccordionDetails} from \"@mui/material\";\r\n\r\n\r\nfunction CollapsibleChanger(props){\r\n    const [refresh, setRefresh] = useState(true);\r\n    const sendChange = (newValue) => {\r\n        props.onValueChange(newValue);\r\n        setRefresh(r => !r);\r\n    }\r\n    console.log(props.scopesDB);\r\n    let scopes= [];\r\n    for(const [itemNumber, itemValue] of Object.entries(props.value)){\r\n        scopes.push(\r\n            <Accordion key={itemNumber} TransitionProps={{ unmountOnExit: true }}>\r\n                <AccordionSummary>\r\n                    {itemValue.name}\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                    <ScopeChanger key={itemNumber} value={itemValue} propertiesDB={props.propertiesDB} keyHistory={props.keyHistory} scopesDB={props.scopesDB} scopeIndex={itemNumber} onValueChange={sendChange}></ScopeChanger>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n            {scopes}\r\n       \r\n        </div>\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     const [currentIndex, setCurrentIndex] = useState(-1);\r\n//     let valueChangerList = [];\r\n//     let dropdownItems = [  \r\n//     <MenuItem key={-1} value={-1}>\r\n//         Hide {props.property}\r\n//     </MenuItem>\r\n//     ];\r\n\r\n//     const sendChange = (newValue) => {\r\n//         // console.log(currentIndex);\r\n//         // console.log(props.property);\r\n//         // console.log(newValue);\r\n//         // let x = new Object;\r\n//         // x[currentIndex] = new Object();\r\n//         // x[currentIndex][newValue[0]] = newValue[1];\r\n//         // console.log(x);\r\n//         console.log(newValue)\r\n//         props.onValueChange(newValue)\r\n//     }\r\n//     const handleChange = (event) => {\r\n//         setCurrentIndex(event.target.value);\r\n//     }\r\n//     console.log(props.value);\r\n\r\n//     for(const [itemNumber, itemValue] of Object.entries(props.value)){\r\n//         let tempArray = [];\r\n//         dropdownItems.push(\r\n//             <MenuItem key={itemNumber} value={itemNumber}>\r\n//                 {itemValue.name}\r\n//             </MenuItem>\r\n//         )\r\n//         for(const [property, value] of Object.entries(itemValue)){\r\n//             tempArray.push(\r\n//                 <Grid key={property} xs={12} sm={6} md={4} xl={3} sx={{pr: 1, pb: 1}}>\r\n//                     <ValueChanger hasBorder={true} key={props.propertiesDB[property]['id']} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n//                 </Grid>\r\n//             )\r\n//         }\r\n//         valueChangerList.push(\r\n//             <Accordion key={itemNumber} defaultExpanded={false} expanded={currentIndex == itemNumber}>\r\n//                 <AccordionSummary>\r\n//                     {itemValue.name}\r\n//                 </AccordionSummary>\r\n//                 <AccordionDetails>\r\n//                     <Grid container>\r\n//                         {tempArray}\r\n//                     </Grid>\r\n//                 </AccordionDetails>\r\n//             </Accordion>\r\n\r\n//         )\r\n//     }\r\n\r\n//     /*keys are how react knows to re-render. \r\n//     Since every item has same properties and COULD have same value, \r\n//     we must use something unique. Which is the index + currentIndex to always \r\n//     make sure we have an offset. We guarantee this offset and uniqueness of keys by multiplying the currentIndex by the items length.\r\n//     If items 1,2,3 have 3 properties. (index starts at 1) The keys for item 1: 3,4,5. For item 2: 6,7,8 item:3 9,10,11 \r\n//     */\r\n//     // for(const [property, value] of Object.entries(props.value[currentIndex])){//Change the one to set to the first element. //MAKE THIS A DROP DOWN TO SELECT WHICH PROPERTIES\r\n//     //     console.log(value);\r\n//     //     valueChangerList.push(\r\n//     //         <ValueChanger hasBorder={true} key={keyIndex} property={property} value={value} keyHistory={[...props.keyHistory, currentIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n//     //     )\r\n//     //     keyIndex++;\r\n//     // }\r\n//    // const [valueChangerList, setValueChangerList] = useState(ta);    \r\n\r\n//     return(\r\n        \r\n//         <Stack spacing={1} sx={{pl: 0,}}>\r\n//             <Select value={currentIndex} onChange={handleChange} sx={{}}>\r\n//                 {dropdownItems}\r\n//             </Select>\r\n//             {valueChangerList}\r\n//         </Stack>\r\n\r\n//     )\r\n}\r\n\r\nexport default CollapsibleChanger;"],"mappings":";;;AACA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,8BAAjB,C,CAAiD;;AACjD,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,SAAR,EAAmBC,gBAAnB,EAAqCC,gBAArC,QAA4D,eAA5D;;;AAGA,SAASC,kBAAT,CAA4BC,KAA5B,EAAkC;EAAA;;EAC9B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;;EACA,MAAMY,UAAU,GAAIC,QAAD,IAAc;IAC7BJ,KAAK,CAACK,aAAN,CAAoBD,QAApB;IACAF,UAAU,CAACI,CAAC,IAAI,CAACA,CAAP,CAAV;EACH,CAHD;;EAIAC,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACS,QAAlB;EACA,IAAIC,MAAM,GAAE,EAAZ;;EACA,KAAI,MAAM,CAACC,UAAD,EAAaC,SAAb,CAAV,IAAqCC,MAAM,CAACC,OAAP,CAAed,KAAK,CAACe,KAArB,CAArC,EAAiE;IAC7DL,MAAM,CAACM,IAAP,eACI,QAAC,SAAD;MAA4B,eAAe,EAAE;QAAEC,aAAa,EAAE;MAAjB,CAA7C;MAAA,wBACI,QAAC,gBAAD;QAAA,UACKL,SAAS,CAACM;MADf;QAAA;QAAA;QAAA;MAAA,QADJ,eAII,QAAC,gBAAD;QAAA,uBACI,QAAC,YAAD;UAA+B,KAAK,EAAEN,SAAtC;UAAiD,YAAY,EAAEZ,KAAK,CAACmB,YAArE;UAAmF,UAAU,EAAEnB,KAAK,CAACoB,UAArG;UAAiH,QAAQ,EAAEpB,KAAK,CAACS,QAAjI;UAA2I,UAAU,EAAEE,UAAvJ;UAAmK,aAAa,EAAER;QAAlL,GAAmBQ,UAAnB;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA,GAAgBA,UAAhB;MAAA;MAAA;MAAA;IAAA,QADJ;EAUH;;EAED,oBACI;IAAA,UAEKD;EAFL;IAAA;IAAA;IAAA;EAAA,QADJ,CArB8B,CAoClC;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;AACC;;GAlHQX,kB;;KAAAA,kB;AAoHT,eAAeA,kBAAf"},"metadata":{},"sourceType":"module"}