{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\ReactUI\\\\React\\\\reactui\\\\src\\\\Controller.js\",\n    _s = $RefreshSig$();\n\nimport Button from '@mui/material/Button';\nimport Client from './Client.js';\nimport React, { useState } from 'react';\nimport { loadYAML } from './YAML.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Controller(props) {\n  _s();\n\n  const [clients, setClients] = useState();\n  const yamlFile = loadYAML(\"test.yml\");\n  const properties = yamlFile.clients['1'];\n\n  const changeValue = _ref => {\n    let [property, value] = _ref;\n    //Array destructuring. Will take the array of property and value and make it into two variables. \n    properties[property] = value;\n  };\n\n  const getClient = async clientNumber => {\n    let req = await fetch(`/getData/${clientNumber}`);\n    console.log(req);\n    let json = await req.json(); //Set properties to json. Should update state. \n  };\n\n  const saveChanges = () => {\n    console.log(\"Saving: \" + clients);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello this is \", props.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => getClient(4),\n      children: \"Click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Client, {\n      properties: properties,\n      onValueChange: changeValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"success\",\n      onClick: saveChanges,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Controller, \"w9fvxHIxQpBEZM+H5p7l4c1Wkos=\");\n\n_c = Controller;\nexport default Controller;\n\nvar _c;\n\n$RefreshReg$(_c, \"Controller\");","map":{"version":3,"names":["Button","Client","React","useState","loadYAML","Controller","props","clients","setClients","yamlFile","properties","changeValue","property","value","getClient","clientNumber","req","fetch","console","log","json","saveChanges","name"],"sources":["C:/Code/ReactUI/React/reactui/src/Controller.js"],"sourcesContent":["import Button from '@mui/material/Button';\r\nimport Client from './Client.js';\r\nimport React, { useState } from 'react';\r\n\r\nimport {loadYAML} from './YAML.js';\r\nfunction Controller(props){\r\n    const [clients, setClients] = useState();\r\n    const yamlFile = loadYAML(\"test.yml\");\r\n    const properties = yamlFile.clients['1'];\r\n    \r\n    const changeValue = ([property, value]) => {//Array destructuring. Will take the array of property and value and make it into two variables. \r\n        properties[property] = value;\r\n    }\r\n    \r\n    const getClient = async (clientNumber) => {\r\n        let req = await fetch(`/getData/${clientNumber}`);\r\n        console.log(req);\r\n        let json = await req.json();\r\n        //Set properties to json. Should update state. \r\n    }\r\n\r\n    const saveChanges = () => {\r\n       console.log(\"Saving: \" + clients);\r\n       \r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>\r\n                Hello this is {props.name}\r\n            </h1>\r\n            <Button variant=\"contained\" onClick={() => getClient(4)}>Click</Button>\r\n            <Client properties={properties} onValueChange={changeValue}></Client>\r\n            {/* <ValueChanger onValueChange={sendChange} name=\"temperature\" value={10}></ValueChanger> */}\r\n            <Button variant=\"contained\" color=\"success\" onClick={saveChanges}>Save Changes</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Controller;"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAAQC,QAAR,QAAuB,WAAvB;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA0B;EAAA;;EACtB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,EAAtC;EACA,MAAMM,QAAQ,GAAGL,QAAQ,CAAC,UAAD,CAAzB;EACA,MAAMM,UAAU,GAAGD,QAAQ,CAACF,OAAT,CAAiB,GAAjB,CAAnB;;EAEA,MAAMI,WAAW,GAAG,QAAuB;IAAA,IAAtB,CAACC,QAAD,EAAWC,KAAX,CAAsB;IAAC;IACxCH,UAAU,CAACE,QAAD,CAAV,GAAuBC,KAAvB;EACH,CAFD;;EAIA,MAAMC,SAAS,GAAG,MAAOC,YAAP,IAAwB;IACtC,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAE,YAAWF,YAAa,EAA1B,CAArB;IACAG,OAAO,CAACC,GAAR,CAAYH,GAAZ;IACA,IAAII,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAJ,EAAjB,CAHsC,CAItC;EACH,CALD;;EAOA,MAAMC,WAAW,GAAG,MAAM;IACvBH,OAAO,CAACC,GAAR,CAAY,aAAaZ,OAAzB;EAEF,CAHD;;EAMA,oBACI;IAAA,wBACI;MAAA,6BACmBD,KAAK,CAACgB,IADzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAII,QAAC,MAAD;MAAQ,OAAO,EAAC,WAAhB;MAA4B,OAAO,EAAE,MAAMR,SAAS,CAAC,CAAD,CAApD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI,QAAC,MAAD;MAAQ,UAAU,EAAEJ,UAApB;MAAgC,aAAa,EAAEC;IAA/C;MAAA;MAAA;MAAA;IAAA,QALJ,eAOI,QAAC,MAAD;MAAQ,OAAO,EAAC,WAAhB;MAA4B,KAAK,EAAC,SAAlC;MAA4C,OAAO,EAAEU,WAArD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAWH;;GAjCQhB,U;;KAAAA,U;AAoCT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}