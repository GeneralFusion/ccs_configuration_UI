{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\ReactUI\\\\React\\\\reactui\\\\src\\\\ScopeChanger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Grid from '@mui/material/Unstable_Grid2/Grid2';\nimport Box from '@mui/material/Box';\nimport { Accordion, AccordionSummary, AccordionDetails } from '@mui/material';\nimport ImageList from '@mui/material/ImageList';\nimport ImageListItem from '@mui/material/ImageListItem';\nimport ValueChanger from './ValueChanger';\nimport ChannelChanger from './ChannelChanger.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultChannel = {\n  \"bwLimit\": false,\n  \"coupling\": \"A1M\",\n  \"id\": \"ch1\",\n  \"name\": \"IFxxx_CO2_refINTERSCOPE1\",\n  \"probe\": 10,\n  \"tdiv\": \"2MS\",\n  \"timeOffset\": \"12MS\",\n  \"vdiv\": \"1v\",\n  \"voltageOffset\": 0\n};\nlet setDefaults = false;\nlet childKey = 0;\n\nfunction ScopeChanger(props) {\n  _s();\n\n  const scopeIndex = props.scopeIndex;\n  const properties = props.value;\n  let channelProperties = { ...properties['channelsConfigSettings']\n  };\n  let activeChannels = [...properties['activeChannels']];\n  const newKeyHistory = [...props.keyHistory, scopeIndex]; //CHANGE ONE\n\n  const [currentType, setCurrentType] = useState(properties['type']);\n  const [name, setName] = useState(properties.name);\n  let channels = [];\n  childKey++;\n  const typeDB = props.scopesDB[currentType];\n\n  const sendChange = newValue => {\n    props.onValueChange(newValue);\n  };\n\n  const changeScopeType = newType => {\n    setDefaults = true;\n    console.log(`${currentType} | ${newType[1]}`);\n    setCurrentType(newType[1]); //sendChange(newType);\n  };\n\n  const channelUpdate = channel => {\n    if (!activeChannels.includes(channel)) {\n      console.log(\"Channel not enabled currently\");\n      activeChannels.push(channel);\n      channelProperties[channel] = { ...defaultChannel\n      };\n    } else {\n      delete channelProperties[channel];\n      activeChannels.splice(activeChannels.indexOf(channel), 1);\n    }\n\n    sendChange([[...props.keyHistory, scopeIndex, 'activeChannels'], activeChannels]);\n    sendChange([[...props.keyHistory, scopeIndex, 'channelsConfigSettings'], channelProperties]);\n  };\n\n  const nameUpdates = newName => {\n    setName(newName);\n    sendChange(newName);\n  };\n\n  console.log(setDefaults);\n\n  for (let channelIndex = 1; channelIndex <= 8; channelIndex++) {\n    if (activeChannels.includes(channelIndex)) {\n      channels.push(\n      /*#__PURE__*/\n      // <Grid key={channelIndex} md={4}>\n      _jsxDEV(ImageListItem, {\n        children: /*#__PURE__*/_jsxDEV(ChannelChanger, {\n          value: properties['channelsConfigSettings'][channelIndex],\n          setDefaults: setDefaults,\n          channelNumber: channelIndex,\n          isActive: true,\n          keyHistory: [...newKeyHistory, 'channelsConfigSettings', channelIndex],\n          propertiesDB: typeDB['channelProperties'],\n          onValueChange: sendChange,\n          channelUpdate: channelUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, childKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this) // </Grid>      \n      );\n      childKey++;\n    } // else{\n    //     channels.push(\n    //         // <Grid key={channelIndex} md={4}>\n    //         <ImageListItem key={channelIndex}>\n    //             <ChannelChanger value={defaultChannel} channelNumber={channelIndex} isActive={false} keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange} channelUpdate={channelUpdate}></ChannelChanger>\n    //         </ImageListItem>\n    //         // </Grid>   \n    //     )    \n    // }\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    columns: 16,\n    spacing: 1,\n    sx: {\n      px: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(ValueChanger, {\n        property: 'type',\n        value: properties['type'],\n        keyHistory: newKeyHistory,\n        propertiesDB: props.propertiesDB,\n        onValueChange: changeScopeType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      md: 16,\n      children: /*#__PURE__*/_jsxDEV(ImageList, {\n        sx: {\n          gridAutoFlow: \"column\",\n          gridTemplateColumns: \"repeat(auto-fill,minmax(25%,1fr)) !important\",\n          gridAutoColumns: \"minmax(25%, 1fr)\",\n          overflowY: 'hidden'\n        },\n        children: channels\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ScopeChanger, \"D7CNMlWlnegRKuPd4iS8Op/RrAQ=\");\n\n_c = ScopeChanger;\nexport default ScopeChanger;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScopeChanger\");","map":{"version":3,"names":["React","useState","Grid","Box","Accordion","AccordionSummary","AccordionDetails","ImageList","ImageListItem","ValueChanger","ChannelChanger","defaultChannel","setDefaults","childKey","ScopeChanger","props","scopeIndex","properties","value","channelProperties","activeChannels","newKeyHistory","keyHistory","currentType","setCurrentType","name","setName","channels","typeDB","scopesDB","sendChange","newValue","onValueChange","changeScopeType","newType","console","log","channelUpdate","channel","includes","push","splice","indexOf","nameUpdates","newName","channelIndex","px","propertiesDB","gridAutoFlow","gridTemplateColumns","gridAutoColumns","overflowY"],"sources":["C:/Code/ReactUI/React/reactui/src/ScopeChanger.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Grid from '@mui/material/Unstable_Grid2/Grid2';\r\nimport Box from '@mui/material/Box';\r\nimport {Accordion, AccordionSummary, AccordionDetails} from '@mui/material';\r\n\r\nimport ImageList from '@mui/material/ImageList';\r\nimport ImageListItem from '@mui/material/ImageListItem';\r\nimport ValueChanger from './ValueChanger';\r\nimport ChannelChanger from './ChannelChanger.js';\r\nconst defaultChannel = {\r\n    \"bwLimit\": false,\r\n    \"coupling\": \"A1M\",\r\n    \"id\": \"ch1\",\r\n    \"name\": \"IFxxx_CO2_refINTERSCOPE1\",\r\n    \"probe\": 10,\r\n    \"tdiv\": \"2MS\",\r\n    \"timeOffset\": \"12MS\",\r\n    \"vdiv\": \"1v\",\r\n    \"voltageOffset\": 0\r\n};\r\nlet setDefaults = false;\r\nlet childKey = 0;\r\nfunction ScopeChanger(props){\r\n    const scopeIndex = props.scopeIndex;\r\n    const properties = props.value;\r\n\r\n    let channelProperties = {...properties['channelsConfigSettings']}; \r\n    let activeChannels = [...properties['activeChannels']];\r\n    const newKeyHistory = [...props.keyHistory, scopeIndex];//CHANGE ONE\r\n    const [currentType, setCurrentType] = useState(properties['type']);\r\n    const [name, setName] = useState(properties.name);\r\n    let channels = [];\r\n    childKey++;\r\n    const typeDB = props.scopesDB[currentType];\r\n    const sendChange = (newValue) => {\r\n        props.onValueChange(newValue);\r\n    }\r\n    const changeScopeType = (newType) => {\r\n        setDefaults = true;\r\n        console.log(`${currentType} | ${newType[1]}`)\r\n        setCurrentType(newType[1]);\r\n        //sendChange(newType);\r\n    }\r\n    const channelUpdate = (channel) => {\r\n        if(!activeChannels.includes(channel)){\r\n            console.log(\"Channel not enabled currently\");\r\n            activeChannels.push(channel);\r\n            channelProperties[channel] = {...defaultChannel};\r\n        }\r\n        else{\r\n            delete channelProperties[channel];\r\n            activeChannels.splice(activeChannels.indexOf(channel), 1);\r\n        }\r\n        sendChange([[...props.keyHistory, scopeIndex, 'activeChannels'], activeChannels]);\r\n        sendChange([[...props.keyHistory, scopeIndex, 'channelsConfigSettings'], channelProperties]);\r\n    }\r\n\r\n    const nameUpdates = (newName) => {\r\n        setName(newName);\r\n        sendChange(newName);\r\n    }\r\n    console.log(setDefaults)\r\n    for(let channelIndex = 1; channelIndex <= 8; channelIndex++){\r\n        if(activeChannels.includes(channelIndex)){\r\n            channels.push(\r\n                // <Grid key={channelIndex} md={4}>\r\n                <ImageListItem key={childKey}>\r\n                    <ChannelChanger \r\n                    value={properties['channelsConfigSettings'][channelIndex]} \r\n                    setDefaults={setDefaults} \r\n                    channelNumber={channelIndex} \r\n                    isActive={true} \r\n                    keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]} \r\n                    propertiesDB={typeDB['channelProperties']} \r\n                    onValueChange={sendChange} \r\n                    channelUpdate={channelUpdate}></ChannelChanger>\r\n                </ImageListItem>\r\n               \r\n                // </Grid>      \r\n            )    \r\n            childKey++;\r\n        }\r\n        // else{\r\n        //     channels.push(\r\n        //         // <Grid key={channelIndex} md={4}>\r\n        //         <ImageListItem key={channelIndex}>\r\n        //             <ChannelChanger value={defaultChannel} channelNumber={channelIndex} isActive={false} keyHistory={[...newKeyHistory, 'channelsConfigSettings', channelIndex]} propertiesDB={props.propertiesDB} onValueChange={sendChange} channelUpdate={channelUpdate}></ChannelChanger>\r\n        //         </ImageListItem>\r\n        //         // </Grid>   \r\n        //     )    \r\n        // }\r\n        \r\n    }\r\n    return(\r\n\r\n              \r\n        \r\n            <Grid container columns={16} spacing={1} sx={{px: 1}} >\r\n            {/* ROW 1 */}\r\n            {/* <Grid md={3}>\r\n                <ValueChanger property={'connectionString'} value={properties['connectionString']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={3}>\r\n                <ValueChanger property={'waveFormat'} isDisabled={properties['waveFormat'] ? false : true} value={properties['waveFormat'] ? properties['waveFormat'] : 'BYTE'} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={4}>\r\n                <ValueChanger property={'name'} value={properties['name']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={nameUpdates}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={3}>\r\n                <ValueChanger property={'filePath'} value={properties['filePath']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={3}>\r\n                <ValueChanger property={'fileFormat'} value={properties['fileFormat']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid> */}\r\n            {/* ROW 1 */}\r\n            {/* ROW 2 */}\r\n            <Grid md={2}>\r\n                <ValueChanger property={'type'} value={properties['type']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={changeScopeType}></ValueChanger>\r\n            </Grid>\r\n            {/* <Grid md={2}>\r\n                <ValueChanger property={'triggerType'} value={properties['triggerType']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger property={'memSize'} value={properties['memSize']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger property={'tdiv'} isDisabled={typeDB['tdiv']['isDisabled']} value={(typeDB['tdiv']['isDisabled'] || setDefaults) ? typeDB['tdiv']['defaultValue'] : properties[typeDB['tdiv']['name']]} keyHistory={newKeyHistory} propertiesDB={typeDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger property={'samplingRate'} isDisabled={properties['samplingRate'] ? false : true} value={properties['samplingRate'] ? properties['samplingRate'] : 0} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger property={'timeOffset'} isDisabled={typeDB['timeOffset']['isDisabled']} value={(typeDB['timeOffset']['isDisabled']) ? typeDB['timeOffset']['defaultValue']: properties['timeOffset']} keyHistory={newKeyHistory} propertiesDB={typeDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger property={'triggerLevel'} isDisabled={properties['triggerLevel'] ? false : true} value={properties['triggerLevel'] ? properties['triggerLevel'] : '2.5V'} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid>\r\n            <Grid md={2}>\r\n                <ValueChanger property={'triggerDelay'} value={properties['triggerDelay']} keyHistory={newKeyHistory} propertiesDB={props.propertiesDB} onValueChange={sendChange}></ValueChanger>\r\n            </Grid> */}\r\n            {/* ROW 2 */}\r\n\r\n            {/* ROW 3 */}\r\n            \r\n            <Grid md={16}>\r\n            <ImageList\r\n            sx={{\r\n                gridAutoFlow: \"column\",\r\n                gridTemplateColumns: \"repeat(auto-fill,minmax(25%,1fr)) !important\",\r\n                gridAutoColumns: \"minmax(25%, 1fr)\",\r\n                overflowY: 'hidden',\r\n                \r\n                \r\n            }}\r\n            >\r\n                {channels}\r\n            </ImageList>\r\n                \r\n\r\n               \r\n\r\n            </Grid>\r\n            \r\n \r\n\r\n        \r\n            {/* ROW 3 */}\r\n\r\n\r\n        </Grid>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ScopeChanger;"],"mappings":"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"},"metadata":{},"sourceType":"module"}